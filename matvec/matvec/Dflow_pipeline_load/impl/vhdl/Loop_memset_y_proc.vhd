-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_memset_y_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    y_ce0 : OUT STD_LOGIC;
    y_we0 : OUT STD_LOGIC;
    y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    A_empty_n : IN STD_LOGIC;
    A_read : OUT STD_LOGIC;
    x_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Loop_memset_y_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal A_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln27_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln25_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_130_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_177 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal y_addr_1_reg_182 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_147_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_190 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal A_read_reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_fu_158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_reg_205 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_phi_mux_phi_ln25_i_phi_fu_84_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln25_i_reg_80 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i4_0_i_reg_91 : STD_LOGIC_VECTOR (1 downto 0);
    signal j5_0_i_reg_102 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln25_fu_113_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_fu_136_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_1_fu_153_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln28_fu_163_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_fu_158_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln26_fu_124_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i4_0_i_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_phi_ln25_i_phi_fu_84_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i4_0_i_reg_91 <= ap_const_lv2_0;
            elsif ((not(((icmp_ln27_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_0 = A_empty_n))) and (icmp_ln27_fu_141_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i4_0_i_reg_91 <= i_reg_177;
            end if; 
        end if;
    end process;

    j5_0_i_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_124_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j5_0_i_reg_102 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j5_0_i_reg_102 <= j_reg_190;
            end if; 
        end if;
    end process;

    phi_ln25_i_reg_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_phi_ln25_i_phi_fu_84_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln25_i_reg_80 <= xor_ln25_fu_118_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln25_i_reg_80 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln27_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_0 = A_empty_n))) and (icmp_ln27_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                A_read_reg_195 <= A_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_177 <= i_fu_130_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln27_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_0 = A_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                j_reg_190 <= j_fu_147_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                mul_ln28_reg_205 <= mul_ln28_fu_158_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_124_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                y_addr_1_reg_182 <= zext_ln28_fu_136_p1(1 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, A_empty_n, ap_CS_fsm_state4, icmp_ln27_fu_141_p2, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln26_fu_124_p2, ap_phi_mux_phi_ln25_i_phi_fu_84_p4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_phi_mux_phi_ln25_i_phi_fu_84_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln26_fu_124_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((icmp_ln27_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_0 = A_empty_n))) and (icmp_ln27_fu_141_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((icmp_ln27_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_0 = A_empty_n))) and (icmp_ln27_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    A_blk_n_assign_proc : process(A_empty_n, ap_CS_fsm_state4, icmp_ln27_fu_141_p2)
    begin
        if (((icmp_ln27_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            A_blk_n <= A_empty_n;
        else 
            A_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    A_read_assign_proc : process(A_empty_n, ap_CS_fsm_state4, icmp_ln27_fu_141_p2)
    begin
        if ((not(((icmp_ln27_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_0 = A_empty_n))) and (icmp_ln27_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            A_read <= ap_const_logic_1;
        else 
            A_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln28_fu_163_p2 <= std_logic_vector(unsigned(y_q0) + unsigned(mul_ln28_reg_205));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state4_assign_proc : process(A_empty_n, icmp_ln27_fu_141_p2)
    begin
                ap_block_state4 <= ((icmp_ln27_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_0 = A_empty_n));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3, icmp_ln26_fu_124_p2)
    begin
        if (((icmp_ln26_fu_124_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_phi_ln25_i_phi_fu_84_p4 <= phi_ln25_i_reg_80;

    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln26_fu_124_p2)
    begin
        if (((icmp_ln26_fu_124_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_130_p2 <= std_logic_vector(unsigned(i4_0_i_reg_91) + unsigned(ap_const_lv2_1));
    icmp_ln26_fu_124_p2 <= "1" when (i4_0_i_reg_91 = ap_const_lv2_2) else "0";
    icmp_ln27_fu_141_p2 <= "1" when (j5_0_i_reg_102 = ap_const_lv2_2) else "0";
    j_fu_147_p2 <= std_logic_vector(unsigned(j5_0_i_reg_102) + unsigned(ap_const_lv2_1));
    mul_ln28_fu_158_p1 <= x_q0;
    mul_ln28_fu_158_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(A_read_reg_195) * signed(mul_ln28_fu_158_p1))), 32));
    x_address0 <= zext_ln28_1_fu_153_p1(1 - 1 downto 0);

    x_ce0_assign_proc : process(A_empty_n, ap_CS_fsm_state4, icmp_ln27_fu_141_p2)
    begin
        if ((not(((icmp_ln27_fu_141_p2 = ap_const_lv1_0) and (ap_const_logic_0 = A_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln25_fu_118_p2 <= (phi_ln25_i_reg_80 xor ap_const_lv1_1);

    y_address0_assign_proc : process(ap_CS_fsm_state2, y_addr_1_reg_182, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln25_fu_113_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            y_address0 <= y_addr_1_reg_182;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            y_address0 <= zext_ln25_fu_113_p1(1 - 1 downto 0);
        else 
            y_address0 <= "X";
        end if; 
    end process;


    y_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            y_ce0 <= ap_const_logic_1;
        else 
            y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, add_ln28_fu_163_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            y_d0 <= add_ln28_fu_163_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            y_d0 <= ap_const_lv32_0;
        else 
            y_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    y_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            y_we0 <= ap_const_logic_1;
        else 
            y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln25_fu_113_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln25_i_reg_80),64));
    zext_ln28_1_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j5_0_i_reg_102),64));
    zext_ln28_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_0_i_reg_91),64));
end behav;
