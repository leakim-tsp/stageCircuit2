// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_memset_y_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        y_address0,
        y_ce0,
        y_we0,
        y_d0,
        y_q0,
        A_dout,
        A_empty_n,
        A_read,
        x_address0,
        x_ce0,
        x_q0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [0:0] y_address0;
output   y_ce0;
output   y_we0;
output  [31:0] y_d0;
input  [31:0] y_q0;
input  [31:0] A_dout;
input   A_empty_n;
output   A_read;
output  [0:0] x_address0;
output   x_ce0;
input  [31:0] x_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] y_address0;
reg y_ce0;
reg y_we0;
reg[31:0] y_d0;
reg A_read;
reg x_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    A_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln27_fu_141_p2;
wire   [0:0] xor_ln25_fu_118_p2;
wire    ap_CS_fsm_state2;
wire   [1:0] i_fu_130_p2;
reg   [1:0] i_reg_177;
wire    ap_CS_fsm_state3;
reg   [0:0] y_addr_1_reg_182;
wire   [0:0] icmp_ln26_fu_124_p2;
wire   [1:0] j_fu_147_p2;
reg   [1:0] j_reg_190;
reg    ap_block_state4;
reg  signed [31:0] A_read_reg_195;
wire   [31:0] mul_ln28_fu_158_p2;
reg   [31:0] mul_ln28_reg_205;
wire    ap_CS_fsm_state5;
wire   [0:0] ap_phi_mux_phi_ln25_i_phi_fu_84_p4;
reg   [0:0] phi_ln25_i_reg_80;
reg    ap_block_state1;
reg   [1:0] i4_0_i_reg_91;
reg   [1:0] j5_0_i_reg_102;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln25_fu_113_p1;
wire   [63:0] zext_ln28_fu_136_p1;
wire   [63:0] zext_ln28_1_fu_153_p1;
wire   [31:0] add_ln28_fu_163_p2;
wire  signed [31:0] mul_ln28_fu_158_p1;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln26_fu_124_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_phi_ln25_i_phi_fu_84_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i4_0_i_reg_91 <= 2'd0;
    end else if ((~((icmp_ln27_fu_141_p2 == 1'd0) & (1'b0 == A_empty_n)) & (icmp_ln27_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i4_0_i_reg_91 <= i_reg_177;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_124_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j5_0_i_reg_102 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        j5_0_i_reg_102 <= j_reg_190;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_phi_ln25_i_phi_fu_84_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln25_i_reg_80 <= xor_ln25_fu_118_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln25_i_reg_80 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln27_fu_141_p2 == 1'd0) & (1'b0 == A_empty_n)) & (icmp_ln27_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        A_read_reg_195 <= A_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_177 <= i_fu_130_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln27_fu_141_p2 == 1'd0) & (1'b0 == A_empty_n)) & (1'b1 == ap_CS_fsm_state4))) begin
        j_reg_190 <= j_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mul_ln28_reg_205 <= mul_ln28_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_124_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        y_addr_1_reg_182 <= zext_ln28_fu_136_p1;
    end
end

always @ (*) begin
    if (((icmp_ln27_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        A_blk_n = A_empty_n;
    end else begin
        A_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln27_fu_141_p2 == 1'd0) & (1'b0 == A_empty_n)) & (icmp_ln27_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        A_read = 1'b1;
    end else begin
        A_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_124_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_124_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln27_fu_141_p2 == 1'd0) & (1'b0 == A_empty_n)) & (1'b1 == ap_CS_fsm_state4))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        y_address0 = y_addr_1_reg_182;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        y_address0 = zext_ln25_fu_113_p1;
    end else begin
        y_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6))) begin
        y_ce0 = 1'b1;
    end else begin
        y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        y_d0 = add_ln28_fu_163_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        y_d0 = 32'd0;
    end else begin
        y_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state6))) begin
        y_we0 = 1'b1;
    end else begin
        y_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_phi_mux_phi_ln25_i_phi_fu_84_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln26_fu_124_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((icmp_ln27_fu_141_p2 == 1'd0) & (1'b0 == A_empty_n)) & (icmp_ln27_fu_141_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((icmp_ln27_fu_141_p2 == 1'd0) & (1'b0 == A_empty_n)) & (icmp_ln27_fu_141_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln28_fu_163_p2 = (y_q0 + mul_ln28_reg_205);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state4 = ((icmp_ln27_fu_141_p2 == 1'd0) & (1'b0 == A_empty_n));
end

assign ap_phi_mux_phi_ln25_i_phi_fu_84_p4 = phi_ln25_i_reg_80;

assign i_fu_130_p2 = (i4_0_i_reg_91 + 2'd1);

assign icmp_ln26_fu_124_p2 = ((i4_0_i_reg_91 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_141_p2 = ((j5_0_i_reg_102 == 2'd2) ? 1'b1 : 1'b0);

assign j_fu_147_p2 = (j5_0_i_reg_102 + 2'd1);

assign mul_ln28_fu_158_p1 = x_q0;

assign mul_ln28_fu_158_p2 = ($signed(A_read_reg_195) * $signed(mul_ln28_fu_158_p1));

assign x_address0 = zext_ln28_1_fu_153_p1;

assign xor_ln25_fu_118_p2 = (phi_ln25_i_reg_80 ^ 1'd1);

assign zext_ln25_fu_113_p1 = phi_ln25_i_reg_80;

assign zext_ln28_1_fu_153_p1 = j5_0_i_reg_102;

assign zext_ln28_fu_136_p1 = i4_0_i_reg_91;

endmodule //Loop_memset_y_proc
