// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Block_tiled_matvec_s_HH_
#define _Block_tiled_matvec_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Block_tiled_matvec_s : public sc_module {
    // Port declarations 23
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > i2_dout;
    sc_in< sc_logic > i2_empty_n;
    sc_out< sc_logic > i2_read;
    sc_in< sc_lv<32> > xtile_V_vec_0_dout;
    sc_in< sc_logic > xtile_V_vec_0_empty_n;
    sc_out< sc_logic > xtile_V_vec_0_read;
    sc_in< sc_lv<32> > xtile_V_vec_1_dout;
    sc_in< sc_logic > xtile_V_vec_1_empty_n;
    sc_out< sc_logic > xtile_V_vec_1_read;
    sc_out< sc_lv<1> > x_address0;
    sc_out< sc_logic > x_ce0;
    sc_out< sc_logic > x_we0;
    sc_out< sc_lv<32> > x_d0;
    sc_out< sc_lv<32> > i2_load_out_out_din;
    sc_in< sc_logic > i2_load_out_out_full_n;
    sc_out< sc_logic > i2_load_out_out_write;


    // Module declarations
    Block_tiled_matvec_s(sc_module_name name);
    SC_HAS_PROCESS(Block_tiled_matvec_s);

    ~Block_tiled_matvec_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > i2_blk_n;
    sc_signal< sc_logic > xtile_V_vec_0_blk_n;
    sc_signal< sc_lv<1> > icmp_ln17_fu_99_p2;
    sc_signal< sc_logic > xtile_V_vec_1_blk_n;
    sc_signal< sc_logic > i2_load_out_out_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > i2_read_reg_141;
    sc_signal< sc_logic > io_acc_block_signal_op10;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > tmp_vec_0_reg_150;
    sc_signal< sc_lv<32> > tmp_vec_1_reg_155;
    sc_signal< sc_lv<2> > i_fu_119_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<2> > i3_0_i_i_reg_88;
    sc_signal< sc_lv<1> > icmp_ln19_fu_113_p2;
    sc_signal< sc_lv<64> > zext_ln20_fu_136_p1;
    sc_signal< sc_lv<1> > trunc_ln20_fu_125_p1;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i2_blk_n();
    void thread_i2_load_out_out_blk_n();
    void thread_i2_load_out_out_din();
    void thread_i2_load_out_out_write();
    void thread_i2_read();
    void thread_i_fu_119_p2();
    void thread_icmp_ln17_fu_99_p2();
    void thread_icmp_ln19_fu_113_p2();
    void thread_io_acc_block_signal_op10();
    void thread_trunc_ln20_fu_125_p1();
    void thread_x_address0();
    void thread_x_ce0();
    void thread_x_d0();
    void thread_x_we0();
    void thread_xtile_V_vec_0_blk_n();
    void thread_xtile_V_vec_0_read();
    void thread_xtile_V_vec_1_blk_n();
    void thread_xtile_V_vec_1_read();
    void thread_zext_ln20_fu_136_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
