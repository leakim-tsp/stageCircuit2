// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Loop_memset_y_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Loop_memset_y_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Loop_memset_y_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> Loop_memset_y_proc::ap_ST_fsm_state1 = "1";
const sc_lv<6> Loop_memset_y_proc::ap_ST_fsm_state2 = "10";
const sc_lv<6> Loop_memset_y_proc::ap_ST_fsm_state3 = "100";
const sc_lv<6> Loop_memset_y_proc::ap_ST_fsm_state4 = "1000";
const sc_lv<6> Loop_memset_y_proc::ap_ST_fsm_state5 = "10000";
const sc_lv<6> Loop_memset_y_proc::ap_ST_fsm_state6 = "100000";
const sc_lv<32> Loop_memset_y_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Loop_memset_y_proc::ap_const_lv32_3 = "11";
const sc_lv<1> Loop_memset_y_proc::ap_const_lv1_0 = "0";
const sc_lv<32> Loop_memset_y_proc::ap_const_lv32_1 = "1";
const sc_lv<32> Loop_memset_y_proc::ap_const_lv32_2 = "10";
const sc_lv<32> Loop_memset_y_proc::ap_const_lv32_4 = "100";
const sc_lv<1> Loop_memset_y_proc::ap_const_lv1_1 = "1";
const sc_lv<2> Loop_memset_y_proc::ap_const_lv2_0 = "00";
const sc_lv<32> Loop_memset_y_proc::ap_const_lv32_5 = "101";
const sc_lv<2> Loop_memset_y_proc::ap_const_lv2_2 = "10";
const sc_lv<2> Loop_memset_y_proc::ap_const_lv2_1 = "1";
const bool Loop_memset_y_proc::ap_const_boolean_1 = true;

Loop_memset_y_proc::Loop_memset_y_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_blk_n);
    sensitive << ( A_empty_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln27_fu_141_p2 );

    SC_METHOD(thread_A_read);
    sensitive << ( A_empty_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln27_fu_141_p2 );

    SC_METHOD(thread_add_ln28_fu_163_p2);
    sensitive << ( y_q0 );
    sensitive << ( mul_ln28_reg_205 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state4);
    sensitive << ( A_empty_n );
    sensitive << ( icmp_ln27_fu_141_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln26_fu_124_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_phi_ln25_i_phi_fu_84_p4);
    sensitive << ( phi_ln25_i_reg_80 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln26_fu_124_p2 );

    SC_METHOD(thread_i_fu_130_p2);
    sensitive << ( i4_0_i_reg_91 );

    SC_METHOD(thread_icmp_ln26_fu_124_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i4_0_i_reg_91 );

    SC_METHOD(thread_icmp_ln27_fu_141_p2);
    sensitive << ( A_empty_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln27_fu_141_p2 );
    sensitive << ( j5_0_i_reg_102 );

    SC_METHOD(thread_j_fu_147_p2);
    sensitive << ( j5_0_i_reg_102 );

    SC_METHOD(thread_mul_ln28_fu_158_p1);
    sensitive << ( x_q0 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_mul_ln28_fu_158_p2);
    sensitive << ( A_read_reg_195 );
    sensitive << ( mul_ln28_fu_158_p1 );

    SC_METHOD(thread_x_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( zext_ln28_1_fu_153_p1 );

    SC_METHOD(thread_x_ce0);
    sensitive << ( A_empty_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln27_fu_141_p2 );

    SC_METHOD(thread_xor_ln25_fu_118_p2);
    sensitive << ( phi_ln25_i_reg_80 );

    SC_METHOD(thread_y_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( y_addr_1_reg_182 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln25_fu_113_p1 );

    SC_METHOD(thread_y_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_y_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( add_ln28_fu_163_p2 );

    SC_METHOD(thread_y_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_zext_ln25_fu_113_p1);
    sensitive << ( phi_ln25_i_reg_80 );

    SC_METHOD(thread_zext_ln28_1_fu_153_p1);
    sensitive << ( j5_0_i_reg_102 );

    SC_METHOD(thread_zext_ln28_fu_136_p1);
    sensitive << ( i4_0_i_reg_91 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( A_empty_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln27_fu_141_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln26_fu_124_p2 );
    sensitive << ( ap_phi_mux_phi_ln25_i_phi_fu_84_p4 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Loop_memset_y_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, y_address0, "(port)y_address0");
    sc_trace(mVcdFile, y_ce0, "(port)y_ce0");
    sc_trace(mVcdFile, y_we0, "(port)y_we0");
    sc_trace(mVcdFile, y_d0, "(port)y_d0");
    sc_trace(mVcdFile, y_q0, "(port)y_q0");
    sc_trace(mVcdFile, A_dout, "(port)A_dout");
    sc_trace(mVcdFile, A_empty_n, "(port)A_empty_n");
    sc_trace(mVcdFile, A_read, "(port)A_read");
    sc_trace(mVcdFile, x_address0, "(port)x_address0");
    sc_trace(mVcdFile, x_ce0, "(port)x_ce0");
    sc_trace(mVcdFile, x_q0, "(port)x_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, A_blk_n, "A_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln27_fu_141_p2, "icmp_ln27_fu_141_p2");
    sc_trace(mVcdFile, xor_ln25_fu_118_p2, "xor_ln25_fu_118_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_130_p2, "i_fu_130_p2");
    sc_trace(mVcdFile, i_reg_177, "i_reg_177");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, y_addr_1_reg_182, "y_addr_1_reg_182");
    sc_trace(mVcdFile, icmp_ln26_fu_124_p2, "icmp_ln26_fu_124_p2");
    sc_trace(mVcdFile, j_fu_147_p2, "j_fu_147_p2");
    sc_trace(mVcdFile, j_reg_190, "j_reg_190");
    sc_trace(mVcdFile, ap_block_state4, "ap_block_state4");
    sc_trace(mVcdFile, A_read_reg_195, "A_read_reg_195");
    sc_trace(mVcdFile, mul_ln28_fu_158_p2, "mul_ln28_fu_158_p2");
    sc_trace(mVcdFile, mul_ln28_reg_205, "mul_ln28_reg_205");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_phi_mux_phi_ln25_i_phi_fu_84_p4, "ap_phi_mux_phi_ln25_i_phi_fu_84_p4");
    sc_trace(mVcdFile, phi_ln25_i_reg_80, "phi_ln25_i_reg_80");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, i4_0_i_reg_91, "i4_0_i_reg_91");
    sc_trace(mVcdFile, j5_0_i_reg_102, "j5_0_i_reg_102");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, zext_ln25_fu_113_p1, "zext_ln25_fu_113_p1");
    sc_trace(mVcdFile, zext_ln28_fu_136_p1, "zext_ln28_fu_136_p1");
    sc_trace(mVcdFile, zext_ln28_1_fu_153_p1, "zext_ln28_1_fu_153_p1");
    sc_trace(mVcdFile, add_ln28_fu_163_p2, "add_ln28_fu_163_p2");
    sc_trace(mVcdFile, mul_ln28_fu_158_p1, "mul_ln28_fu_158_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Loop_memset_y_proc::~Loop_memset_y_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Loop_memset_y_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                    esl_seteq<1,1,1>(icmp_ln26_fu_124_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_phi_mux_phi_ln25_i_phi_fu_84_p4.read(), ap_const_lv1_1))) {
        i4_0_i_reg_91 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                !(esl_seteq<1,1,1>(icmp_ln27_fu_141_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, A_empty_n.read())) && 
                esl_seteq<1,1,1>(icmp_ln27_fu_141_p2.read(), ap_const_lv1_1))) {
        i4_0_i_reg_91 = i_reg_177.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln26_fu_124_p2.read()))) {
        j5_0_i_reg_102 = ap_const_lv2_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        j5_0_i_reg_102 = j_reg_190.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_phi_mux_phi_ln25_i_phi_fu_84_p4.read()))) {
        phi_ln25_i_reg_80 = xor_ln25_fu_118_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        phi_ln25_i_reg_80 = ap_const_lv1_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln27_fu_141_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln27_fu_141_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, A_empty_n.read())))) {
        A_read_reg_195 = A_dout.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_reg_177 = i_fu_130_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(icmp_ln27_fu_141_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, A_empty_n.read())))) {
        j_reg_190 = j_fu_147_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        mul_ln28_reg_205 = mul_ln28_fu_158_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln26_fu_124_p2.read()))) {
        y_addr_1_reg_182 =  (sc_lv<1>) (zext_ln28_fu_136_p1.read());
    }
}

void Loop_memset_y_proc::thread_A_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln27_fu_141_p2.read(), ap_const_lv1_0))) {
        A_blk_n = A_empty_n.read();
    } else {
        A_blk_n = ap_const_logic_1;
    }
}

void Loop_memset_y_proc::thread_A_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln27_fu_141_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln27_fu_141_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, A_empty_n.read())))) {
        A_read = ap_const_logic_1;
    } else {
        A_read = ap_const_logic_0;
    }
}

void Loop_memset_y_proc::thread_add_ln28_fu_163_p2() {
    add_ln28_fu_163_p2 = (!y_q0.read().is_01() || !mul_ln28_reg_205.read().is_01())? sc_lv<32>(): (sc_biguint<32>(y_q0.read()) + sc_biguint<32>(mul_ln28_reg_205.read()));
}

void Loop_memset_y_proc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Loop_memset_y_proc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Loop_memset_y_proc::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Loop_memset_y_proc::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Loop_memset_y_proc::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Loop_memset_y_proc::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void Loop_memset_y_proc::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Loop_memset_y_proc::thread_ap_block_state4() {
    ap_block_state4 = (esl_seteq<1,1,1>(icmp_ln27_fu_141_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, A_empty_n.read()));
}

void Loop_memset_y_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln26_fu_124_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Loop_memset_y_proc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Loop_memset_y_proc::thread_ap_phi_mux_phi_ln25_i_phi_fu_84_p4() {
    ap_phi_mux_phi_ln25_i_phi_fu_84_p4 = phi_ln25_i_reg_80.read();
}

void Loop_memset_y_proc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln26_fu_124_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Loop_memset_y_proc::thread_i_fu_130_p2() {
    i_fu_130_p2 = (!i4_0_i_reg_91.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i4_0_i_reg_91.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void Loop_memset_y_proc::thread_icmp_ln26_fu_124_p2() {
    icmp_ln26_fu_124_p2 = (!i4_0_i_reg_91.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(i4_0_i_reg_91.read() == ap_const_lv2_2);
}

void Loop_memset_y_proc::thread_icmp_ln27_fu_141_p2() {
    icmp_ln27_fu_141_p2 = (!j5_0_i_reg_102.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(j5_0_i_reg_102.read() == ap_const_lv2_2);
}

void Loop_memset_y_proc::thread_j_fu_147_p2() {
    j_fu_147_p2 = (!j5_0_i_reg_102.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(j5_0_i_reg_102.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void Loop_memset_y_proc::thread_mul_ln28_fu_158_p1() {
    mul_ln28_fu_158_p1 = x_q0.read();
}

void Loop_memset_y_proc::thread_mul_ln28_fu_158_p2() {
    mul_ln28_fu_158_p2 = (!A_read_reg_195.read().is_01() || !mul_ln28_fu_158_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(A_read_reg_195.read()) * sc_bigint<32>(mul_ln28_fu_158_p1.read());
}

void Loop_memset_y_proc::thread_x_address0() {
    x_address0 =  (sc_lv<1>) (zext_ln28_1_fu_153_p1.read());
}

void Loop_memset_y_proc::thread_x_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         !(esl_seteq<1,1,1>(icmp_ln27_fu_141_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, A_empty_n.read())))) {
        x_ce0 = ap_const_logic_1;
    } else {
        x_ce0 = ap_const_logic_0;
    }
}

void Loop_memset_y_proc::thread_xor_ln25_fu_118_p2() {
    xor_ln25_fu_118_p2 = (phi_ln25_i_reg_80.read() ^ ap_const_lv1_1);
}

void Loop_memset_y_proc::thread_y_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        y_address0 = y_addr_1_reg_182.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        y_address0 =  (sc_lv<1>) (zext_ln25_fu_113_p1.read());
    } else {
        y_address0 = "X";
    }
}

void Loop_memset_y_proc::thread_y_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        y_ce0 = ap_const_logic_1;
    } else {
        y_ce0 = ap_const_logic_0;
    }
}

void Loop_memset_y_proc::thread_y_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        y_d0 = add_ln28_fu_163_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        y_d0 = ap_const_lv32_0;
    } else {
        y_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Loop_memset_y_proc::thread_y_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        y_we0 = ap_const_logic_1;
    } else {
        y_we0 = ap_const_logic_0;
    }
}

void Loop_memset_y_proc::thread_zext_ln25_fu_113_p1() {
    zext_ln25_fu_113_p1 = esl_zext<64,1>(phi_ln25_i_reg_80.read());
}

void Loop_memset_y_proc::thread_zext_ln28_1_fu_153_p1() {
    zext_ln28_1_fu_153_p1 = esl_zext<64,2>(j5_0_i_reg_102.read());
}

void Loop_memset_y_proc::thread_zext_ln28_fu_136_p1() {
    zext_ln28_fu_136_p1 = esl_zext<64,2>(i4_0_i_reg_91.read());
}

void Loop_memset_y_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_phi_mux_phi_ln25_i_phi_fu_84_p4.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln26_fu_124_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(icmp_ln27_fu_141_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, A_empty_n.read())) && esl_seteq<1,1,1>(icmp_ln27_fu_141_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln27_fu_141_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln27_fu_141_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, A_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

}

