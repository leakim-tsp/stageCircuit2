-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tiled_matvec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Atile_V_vec_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Atile_V_vec_0_empty_n : IN STD_LOGIC;
    Atile_V_vec_0_read : OUT STD_LOGIC;
    Atile_V_vec_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Atile_V_vec_1_empty_n : IN STD_LOGIC;
    Atile_V_vec_1_read : OUT STD_LOGIC;
    xtile_V_vec_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    xtile_V_vec_0_empty_n : IN STD_LOGIC;
    xtile_V_vec_0_read : OUT STD_LOGIC;
    xtile_V_vec_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    xtile_V_vec_1_empty_n : IN STD_LOGIC;
    xtile_V_vec_1_read : OUT STD_LOGIC;
    ypartial_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ypartial_ce0 : OUT STD_LOGIC;
    ypartial_we0 : OUT STD_LOGIC;
    ypartial_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ypartial_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    i1 : IN STD_LOGIC_VECTOR (31 downto 0);
    i2 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of tiled_matvec is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "tiled_matvec,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.836000,HLS_SYN_LAT=29,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=674,HLS_SYN_LUT=767,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal A_1_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal A_1_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal x_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal A_0_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal A_0_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Atile_V_vec_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln8_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Atile_V_vec_1_blk_n : STD_LOGIC;
    signal xtile_V_vec_0_blk_n : STD_LOGIC;
    signal icmp_ln17_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xtile_V_vec_1_blk_n : STD_LOGIC;
    signal i_fu_236_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_534 : STD_LOGIC_VECTOR (1 downto 0);
    signal io_acc_block_signal_op28 : STD_LOGIC;
    signal io_acc_block_signal_op36 : STD_LOGIC;
    signal ap_predicate_op36_read_state2 : BOOLEAN;
    signal ap_block_state2 : BOOLEAN;
    signal tmp_vec_0_reg_539 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_vec_1_reg_544 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln11_fu_250_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln11_reg_549 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_558 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_vec_0_1_reg_562 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_vec_1_1_reg_567 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_274_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_3_fu_320_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal A_1_0_load_reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln19_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal A_1_1_load_reg_613 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_0_load_reg_618 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1_load_reg_623 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_0_0_load_reg_628 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_0_1_load_reg_633 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_388_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_641 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln28_fu_394_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln28_reg_646 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln35_fu_398_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln35_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_409_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_662 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal mul_ln28_fu_444_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln28_reg_667 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln27_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_496_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_675 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ypartial_addr_reg_680 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln33_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_157 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln10_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_reg_168 : STD_LOGIC_VECTOR (1 downto 0);
    signal i3_0_reg_179 : STD_LOGIC_VECTOR (1 downto 0);
    signal i4_0_reg_190 : STD_LOGIC_VECTOR (1 downto 0);
    signal j5_0_reg_201 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i6_0_reg_212 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal sext_ln35_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln11_fu_284_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln11_1_fu_280_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln20_fu_330_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln20_fu_326_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_1_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_6_fu_469_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_3_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_5_fu_462_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln28_1_fu_415_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_1_fu_419_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_fu_425_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_4_fu_431_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_2_fu_438_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_3_fu_450_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_0_fu_457_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln33_fu_486_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_fu_502_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln35_fu_512_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_516_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i3_0_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_558 = ap_const_lv1_1) and (icmp_ln19_fu_314_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i3_0_reg_179 <= i_3_fu_320_p2;
            elsif ((not((((io_acc_block_signal_op36 = ap_const_logic_0) and (ap_predicate_op36_read_state2 = ap_const_boolean_1)) or ((icmp_ln8_fu_230_p2 = ap_const_lv1_0) and (io_acc_block_signal_op28 = ap_const_logic_0)))) and (icmp_ln17_fu_254_p2 = ap_const_lv1_1) and (icmp_ln8_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i3_0_reg_179 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i4_0_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_403_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i4_0_reg_190 <= i_1_reg_641;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln19_fu_314_p2 = ap_const_lv1_1) or (icmp_ln17_reg_558 = ap_const_lv1_0)))) then 
                i4_0_reg_190 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i6_0_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_382_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i6_0_reg_212 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i6_0_reg_212 <= i_4_reg_675;
            end if; 
        end if;
    end process;

    i_0_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_157 <= i_reg_534;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_157 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j5_0_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j5_0_reg_201 <= j_1_reg_662;
            elsif (((icmp_ln26_fu_382_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j5_0_reg_201 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_0_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_0_reg_168 <= j_fu_274_p2;
            elsif ((not((((io_acc_block_signal_op36 = ap_const_logic_0) and (ap_predicate_op36_read_state2 = ap_const_boolean_1)) or ((icmp_ln8_fu_230_p2 = ap_const_lv1_0) and (io_acc_block_signal_op28 = ap_const_logic_0)))) and (icmp_ln8_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_168 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    y_1_3_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                y_1_3_fu_118 <= y_1_5_fu_462_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln19_fu_314_p2 = ap_const_lv1_1) or (icmp_ln17_reg_558 = ap_const_lv1_0)))) then 
                y_1_3_fu_118 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    y_1_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                y_1_fu_114 <= y_1_6_fu_469_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln19_fu_314_p2 = ap_const_lv1_1) or (icmp_ln17_reg_558 = ap_const_lv1_0)))) then 
                y_1_fu_114 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln11_1_fu_280_p1 = ap_const_lv1_0) and (icmp_ln10_fu_268_p2 = ap_const_lv1_0) and (trunc_ln11_reg_549 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                A_0_0 <= select_ln11_fu_284_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln19_fu_314_p2 = ap_const_lv1_1) or (icmp_ln17_reg_558 = ap_const_lv1_0)))) then
                A_0_0_load_reg_628 <= A_0_0;
                A_0_1_load_reg_633 <= A_0_1;
                A_1_0_load_reg_608 <= A_1_0;
                A_1_1_load_reg_613 <= A_1_1;
                x_0_load_reg_618 <= x_0;
                x_1_load_reg_623 <= x_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln11_1_fu_280_p1 = ap_const_lv1_1) and (icmp_ln10_fu_268_p2 = ap_const_lv1_0) and (trunc_ln11_reg_549 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                A_0_1 <= select_ln11_fu_284_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln11_reg_549 = ap_const_lv1_1) and (trunc_ln11_1_fu_280_p1 = ap_const_lv1_0) and (icmp_ln10_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                A_1_0 <= select_ln11_fu_284_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln11_1_fu_280_p1 = ap_const_lv1_1) and (trunc_ln11_reg_549 = ap_const_lv1_1) and (icmp_ln10_fu_268_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                A_1_1 <= select_ln11_fu_284_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_1_reg_641 <= i_1_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_4_reg_675 <= i_4_fu_496_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((io_acc_block_signal_op36 = ap_const_logic_0) and (ap_predicate_op36_read_state2 = ap_const_boolean_1)) or ((icmp_ln8_fu_230_p2 = ap_const_lv1_0) and (io_acc_block_signal_op28 = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_534 <= i_fu_236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((io_acc_block_signal_op36 = ap_const_logic_0) and (ap_predicate_op36_read_state2 = ap_const_boolean_1)) or ((icmp_ln8_fu_230_p2 = ap_const_lv1_0) and (io_acc_block_signal_op28 = ap_const_logic_0)))) and (icmp_ln8_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln17_reg_558 <= icmp_ln17_fu_254_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_1_reg_662 <= j_1_fu_409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_403_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                mul_ln28_reg_667 <= mul_ln28_fu_444_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_382_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    shl_ln35_reg_654(31 downto 1) <= shl_ln35_fu_398_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((io_acc_block_signal_op36 = ap_const_logic_0) and (ap_predicate_op36_read_state2 = ap_const_boolean_1)) or ((icmp_ln8_fu_230_p2 = ap_const_lv1_0) and (io_acc_block_signal_op28 = ap_const_logic_0)))) and (icmp_ln17_fu_254_p2 = ap_const_lv1_1) and (icmp_ln8_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_vec_0_1_reg_562 <= xtile_V_vec_0_dout;
                tmp_vec_1_1_reg_567 <= xtile_V_vec_1_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((io_acc_block_signal_op36 = ap_const_logic_0) and (ap_predicate_op36_read_state2 = ap_const_boolean_1)) or ((icmp_ln8_fu_230_p2 = ap_const_lv1_0) and (io_acc_block_signal_op28 = ap_const_logic_0)))) and (icmp_ln8_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_vec_0_reg_539 <= Atile_V_vec_0_dout;
                tmp_vec_1_reg_544 <= Atile_V_vec_1_dout;
                trunc_ln11_reg_549 <= trunc_ln11_fu_250_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_382_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                trunc_ln28_reg_646 <= trunc_ln28_fu_394_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_558 = ap_const_lv1_1) and (trunc_ln20_fu_326_p1 = ap_const_lv1_0) and (icmp_ln19_fu_314_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                x_0 <= select_ln20_fu_330_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln20_fu_326_p1 = ap_const_lv1_1) and (icmp_ln17_reg_558 = ap_const_lv1_1) and (icmp_ln19_fu_314_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                x_1 <= select_ln20_fu_330_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_490_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                ypartial_addr_reg_680 <= sext_ln35_fu_507_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    shl_ln35_reg_654(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_230_p2, io_acc_block_signal_op28, io_acc_block_signal_op36, ap_predicate_op36_read_state2, icmp_ln17_reg_558, ap_CS_fsm_state3, ap_CS_fsm_state4, icmp_ln19_fu_314_p2, ap_CS_fsm_state5, icmp_ln26_fu_382_p2, ap_CS_fsm_state6, icmp_ln27_fu_403_p2, ap_CS_fsm_state8, icmp_ln33_fu_490_p2, icmp_ln10_fu_268_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((((io_acc_block_signal_op36 = ap_const_logic_0) and (ap_predicate_op36_read_state2 = ap_const_boolean_1)) or ((icmp_ln8_fu_230_p2 = ap_const_lv1_0) and (io_acc_block_signal_op28 = ap_const_logic_0)))) and (icmp_ln8_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not((((io_acc_block_signal_op36 = ap_const_logic_0) and (ap_predicate_op36_read_state2 = ap_const_boolean_1)) or ((icmp_ln8_fu_230_p2 = ap_const_lv1_0) and (io_acc_block_signal_op28 = ap_const_logic_0)))) and (icmp_ln8_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln10_fu_268_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln19_fu_314_p2 = ap_const_lv1_1) or (icmp_ln17_reg_558 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln26_fu_382_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln27_fu_403_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln33_fu_490_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    Atile_V_vec_0_blk_n_assign_proc : process(Atile_V_vec_0_empty_n, ap_CS_fsm_state2, icmp_ln8_fu_230_p2)
    begin
        if (((icmp_ln8_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Atile_V_vec_0_blk_n <= Atile_V_vec_0_empty_n;
        else 
            Atile_V_vec_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Atile_V_vec_0_read_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_230_p2, io_acc_block_signal_op28, io_acc_block_signal_op36, ap_predicate_op36_read_state2)
    begin
        if ((not((((io_acc_block_signal_op36 = ap_const_logic_0) and (ap_predicate_op36_read_state2 = ap_const_boolean_1)) or ((icmp_ln8_fu_230_p2 = ap_const_lv1_0) and (io_acc_block_signal_op28 = ap_const_logic_0)))) and (icmp_ln8_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Atile_V_vec_0_read <= ap_const_logic_1;
        else 
            Atile_V_vec_0_read <= ap_const_logic_0;
        end if; 
    end process;


    Atile_V_vec_1_blk_n_assign_proc : process(Atile_V_vec_1_empty_n, ap_CS_fsm_state2, icmp_ln8_fu_230_p2)
    begin
        if (((icmp_ln8_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Atile_V_vec_1_blk_n <= Atile_V_vec_1_empty_n;
        else 
            Atile_V_vec_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Atile_V_vec_1_read_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_230_p2, io_acc_block_signal_op28, io_acc_block_signal_op36, ap_predicate_op36_read_state2)
    begin
        if ((not((((io_acc_block_signal_op36 = ap_const_logic_0) and (ap_predicate_op36_read_state2 = ap_const_boolean_1)) or ((icmp_ln8_fu_230_p2 = ap_const_lv1_0) and (io_acc_block_signal_op28 = ap_const_logic_0)))) and (icmp_ln8_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Atile_V_vec_1_read <= ap_const_logic_1;
        else 
            Atile_V_vec_1_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln35_fu_502_p2 <= std_logic_vector(unsigned(zext_ln33_fu_486_p1) + unsigned(shl_ln35_reg_654));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state2_assign_proc : process(icmp_ln8_fu_230_p2, io_acc_block_signal_op28, io_acc_block_signal_op36, ap_predicate_op36_read_state2)
    begin
                ap_block_state2 <= (((io_acc_block_signal_op36 = ap_const_logic_0) and (ap_predicate_op36_read_state2 = ap_const_boolean_1)) or ((icmp_ln8_fu_230_p2 = ap_const_lv1_0) and (io_acc_block_signal_op28 = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state8, icmp_ln33_fu_490_p2)
    begin
        if (((icmp_ln33_fu_490_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op36_read_state2_assign_proc : process(icmp_ln8_fu_230_p2, icmp_ln17_fu_254_p2)
    begin
                ap_predicate_op36_read_state2 <= ((icmp_ln17_fu_254_p2 = ap_const_lv1_1) and (icmp_ln8_fu_230_p2 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, icmp_ln33_fu_490_p2)
    begin
        if (((icmp_ln33_fu_490_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_388_p2 <= std_logic_vector(unsigned(i4_0_reg_190) + unsigned(ap_const_lv2_1));
    i_3_fu_320_p2 <= std_logic_vector(unsigned(i3_0_reg_179) + unsigned(ap_const_lv2_1));
    i_4_fu_496_p2 <= std_logic_vector(unsigned(i6_0_reg_212) + unsigned(ap_const_lv2_1));
    i_fu_236_p2 <= std_logic_vector(unsigned(i_0_reg_157) + unsigned(ap_const_lv2_1));
    icmp_ln10_fu_268_p2 <= "1" when (j_0_reg_168 = ap_const_lv2_2) else "0";
    icmp_ln17_fu_254_p2 <= "1" when (i2 = ap_const_lv32_0) else "0";
    icmp_ln19_fu_314_p2 <= "1" when (i3_0_reg_179 = ap_const_lv2_2) else "0";
    icmp_ln26_fu_382_p2 <= "1" when (i4_0_reg_190 = ap_const_lv2_2) else "0";
    icmp_ln27_fu_403_p2 <= "1" when (j5_0_reg_201 = ap_const_lv2_2) else "0";
    icmp_ln33_fu_490_p2 <= "1" when (i6_0_reg_212 = ap_const_lv2_2) else "0";
    icmp_ln8_fu_230_p2 <= "1" when (i_0_reg_157 = ap_const_lv2_2) else "0";
    io_acc_block_signal_op28 <= (Atile_V_vec_1_empty_n and Atile_V_vec_0_empty_n);
    io_acc_block_signal_op36 <= (xtile_V_vec_1_empty_n and xtile_V_vec_0_empty_n);
    j_1_fu_409_p2 <= std_logic_vector(unsigned(j5_0_reg_201) + unsigned(ap_const_lv2_1));
    j_fu_274_p2 <= std_logic_vector(unsigned(j_0_reg_168) + unsigned(ap_const_lv2_1));
    mul_ln28_fu_444_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(select_ln28_4_fu_431_p3) * signed(select_ln28_2_fu_438_p3))), 32));
    select_ln11_fu_284_p3 <= 
        tmp_vec_1_reg_544 when (trunc_ln11_1_fu_280_p1(0) = '1') else 
        tmp_vec_0_reg_539;
    select_ln20_fu_330_p3 <= 
        tmp_vec_1_1_reg_567 when (trunc_ln20_fu_326_p1(0) = '1') else 
        tmp_vec_0_1_reg_562;
    select_ln28_1_fu_419_p3 <= 
        A_1_1_load_reg_613 when (trunc_ln28_1_fu_415_p1(0) = '1') else 
        A_1_0_load_reg_608;
    select_ln28_2_fu_438_p3 <= 
        x_1_load_reg_623 when (trunc_ln28_1_fu_415_p1(0) = '1') else 
        x_0_load_reg_618;
    select_ln28_3_fu_450_p3 <= 
        y_1_3_fu_118 when (trunc_ln28_reg_646(0) = '1') else 
        y_1_fu_114;
    select_ln28_4_fu_431_p3 <= 
        select_ln28_1_fu_419_p3 when (trunc_ln28_reg_646(0) = '1') else 
        select_ln28_fu_425_p3;
    select_ln28_fu_425_p3 <= 
        A_0_1_load_reg_633 when (trunc_ln28_1_fu_415_p1(0) = '1') else 
        A_0_0_load_reg_628;
    select_ln35_fu_516_p3 <= 
        y_1_3_fu_118 when (trunc_ln35_fu_512_p1(0) = '1') else 
        y_1_fu_114;
        sext_ln35_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln35_fu_502_p2),64));

    shl_ln35_fu_398_p2 <= std_logic_vector(shift_left(unsigned(i2),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    trunc_ln11_1_fu_280_p1 <= j_0_reg_168(1 - 1 downto 0);
    trunc_ln11_fu_250_p1 <= i_0_reg_157(1 - 1 downto 0);
    trunc_ln20_fu_326_p1 <= i3_0_reg_179(1 - 1 downto 0);
    trunc_ln28_1_fu_415_p1 <= j5_0_reg_201(1 - 1 downto 0);
    trunc_ln28_fu_394_p1 <= i4_0_reg_190(1 - 1 downto 0);
    trunc_ln35_fu_512_p1 <= i6_0_reg_212(1 - 1 downto 0);

    xtile_V_vec_0_blk_n_assign_proc : process(xtile_V_vec_0_empty_n, ap_CS_fsm_state2, icmp_ln8_fu_230_p2, icmp_ln17_fu_254_p2)
    begin
        if (((icmp_ln17_fu_254_p2 = ap_const_lv1_1) and (icmp_ln8_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            xtile_V_vec_0_blk_n <= xtile_V_vec_0_empty_n;
        else 
            xtile_V_vec_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    xtile_V_vec_0_read_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_230_p2, io_acc_block_signal_op28, io_acc_block_signal_op36, ap_predicate_op36_read_state2)
    begin
        if ((not((((io_acc_block_signal_op36 = ap_const_logic_0) and (ap_predicate_op36_read_state2 = ap_const_boolean_1)) or ((icmp_ln8_fu_230_p2 = ap_const_lv1_0) and (io_acc_block_signal_op28 = ap_const_logic_0)))) and (ap_predicate_op36_read_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            xtile_V_vec_0_read <= ap_const_logic_1;
        else 
            xtile_V_vec_0_read <= ap_const_logic_0;
        end if; 
    end process;


    xtile_V_vec_1_blk_n_assign_proc : process(xtile_V_vec_1_empty_n, ap_CS_fsm_state2, icmp_ln8_fu_230_p2, icmp_ln17_fu_254_p2)
    begin
        if (((icmp_ln17_fu_254_p2 = ap_const_lv1_1) and (icmp_ln8_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            xtile_V_vec_1_blk_n <= xtile_V_vec_1_empty_n;
        else 
            xtile_V_vec_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    xtile_V_vec_1_read_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_230_p2, io_acc_block_signal_op28, io_acc_block_signal_op36, ap_predicate_op36_read_state2)
    begin
        if ((not((((io_acc_block_signal_op36 = ap_const_logic_0) and (ap_predicate_op36_read_state2 = ap_const_boolean_1)) or ((icmp_ln8_fu_230_p2 = ap_const_lv1_0) and (io_acc_block_signal_op28 = ap_const_logic_0)))) and (ap_predicate_op36_read_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            xtile_V_vec_1_read <= ap_const_logic_1;
        else 
            xtile_V_vec_1_read <= ap_const_logic_0;
        end if; 
    end process;

    y_0_fu_457_p2 <= std_logic_vector(unsigned(mul_ln28_reg_667) + unsigned(select_ln28_3_fu_450_p3));
    y_1_5_fu_462_p3 <= 
        y_0_fu_457_p2 when (trunc_ln28_reg_646(0) = '1') else 
        y_1_3_fu_118;
    y_1_6_fu_469_p3 <= 
        y_1_fu_114 when (trunc_ln28_reg_646(0) = '1') else 
        y_0_fu_457_p2;

    ypartial_address0_assign_proc : process(ap_CS_fsm_state8, ypartial_addr_reg_680, ap_CS_fsm_state9, sext_ln35_fu_507_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ypartial_address0 <= ypartial_addr_reg_680;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ypartial_address0 <= sext_ln35_fu_507_p1(3 - 1 downto 0);
        else 
            ypartial_address0 <= "XXX";
        end if; 
    end process;


    ypartial_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ypartial_ce0 <= ap_const_logic_1;
        else 
            ypartial_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ypartial_d0 <= std_logic_vector(unsigned(ypartial_q0) + unsigned(select_ln35_fu_516_p3));

    ypartial_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ypartial_we0 <= ap_const_logic_1;
        else 
            ypartial_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln33_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i6_0_reg_212),32));
end behav;
