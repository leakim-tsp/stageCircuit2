// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="tiled_matvec,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1157-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.836000,HLS_SYN_LAT=29,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=673,HLS_SYN_LUT=767,HLS_VERSION=2019_2}" *)

module tiled_matvec (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Atile_V_vec_0_dout,
        Atile_V_vec_0_empty_n,
        Atile_V_vec_0_read,
        Atile_V_vec_1_dout,
        Atile_V_vec_1_empty_n,
        Atile_V_vec_1_read,
        xtile_V_vec_0_dout,
        xtile_V_vec_0_empty_n,
        xtile_V_vec_0_read,
        xtile_V_vec_1_dout,
        xtile_V_vec_1_empty_n,
        xtile_V_vec_1_read,
        ypartial_address0,
        ypartial_ce0,
        ypartial_we0,
        ypartial_d0,
        ypartial_q0,
        i1,
        i2
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Atile_V_vec_0_dout;
input   Atile_V_vec_0_empty_n;
output   Atile_V_vec_0_read;
input  [31:0] Atile_V_vec_1_dout;
input   Atile_V_vec_1_empty_n;
output   Atile_V_vec_1_read;
input  [31:0] xtile_V_vec_0_dout;
input   xtile_V_vec_0_empty_n;
output   xtile_V_vec_0_read;
input  [31:0] xtile_V_vec_1_dout;
input   xtile_V_vec_1_empty_n;
output   xtile_V_vec_1_read;
output  [1:0] ypartial_address0;
output   ypartial_ce0;
output   ypartial_we0;
output  [31:0] ypartial_d0;
input  [31:0] ypartial_q0;
input  [31:0] i1;
input  [31:0] i2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Atile_V_vec_0_read;
reg Atile_V_vec_1_read;
reg xtile_V_vec_0_read;
reg xtile_V_vec_1_read;
reg[1:0] ypartial_address0;
reg ypartial_ce0;
reg ypartial_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] A_1_0;
reg   [31:0] A_1_1;
reg   [31:0] x_0;
reg   [31:0] x_1;
reg   [31:0] A_0_0;
reg   [31:0] A_0_1;
reg    Atile_V_vec_0_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln8_fu_178_p2;
reg    Atile_V_vec_1_blk_n;
reg    xtile_V_vec_0_blk_n;
wire   [0:0] icmp_ln17_fu_202_p2;
reg    xtile_V_vec_1_blk_n;
wire   [1:0] i_fu_184_p2;
reg   [1:0] i_reg_482;
wire    io_acc_block_signal_op28;
wire    io_acc_block_signal_op36;
reg    ap_predicate_op36_read_state2;
reg    ap_block_state2;
reg   [31:0] tmp_vec_0_reg_487;
reg   [31:0] tmp_vec_1_reg_492;
wire   [0:0] trunc_ln11_fu_198_p1;
reg   [0:0] trunc_ln11_reg_497;
reg   [0:0] icmp_ln17_reg_506;
reg   [31:0] tmp_vec_0_1_reg_510;
reg   [31:0] tmp_vec_1_1_reg_515;
wire   [1:0] j_fu_222_p2;
wire    ap_CS_fsm_state3;
wire   [1:0] i_3_fu_268_p2;
wire    ap_CS_fsm_state4;
reg   [31:0] A_1_0_load_reg_556;
wire   [0:0] icmp_ln19_fu_262_p2;
reg   [31:0] A_1_1_load_reg_561;
reg   [31:0] x_0_load_reg_566;
reg   [31:0] x_1_load_reg_571;
reg   [31:0] A_0_0_load_reg_576;
reg   [31:0] A_0_1_load_reg_581;
wire   [1:0] i_1_fu_336_p2;
reg   [1:0] i_1_reg_589;
wire    ap_CS_fsm_state5;
wire   [0:0] trunc_ln28_fu_342_p1;
reg   [0:0] trunc_ln28_reg_594;
wire   [0:0] icmp_ln26_fu_330_p2;
wire   [31:0] shl_ln35_fu_346_p2;
reg   [31:0] shl_ln35_reg_602;
wire   [1:0] j_1_fu_357_p2;
reg   [1:0] j_1_reg_610;
wire    ap_CS_fsm_state6;
wire   [31:0] mul_ln28_fu_392_p2;
reg   [31:0] mul_ln28_reg_615;
wire   [0:0] icmp_ln27_fu_351_p2;
wire   [1:0] i_4_fu_444_p2;
reg   [1:0] i_4_reg_623;
wire    ap_CS_fsm_state8;
reg   [1:0] ypartial_addr_reg_628;
wire   [0:0] icmp_ln33_fu_438_p2;
reg   [1:0] i_0_reg_105;
wire   [0:0] icmp_ln10_fu_216_p2;
reg   [1:0] j_0_reg_116;
reg   [1:0] i3_0_reg_127;
reg   [1:0] i4_0_reg_138;
reg   [1:0] j5_0_reg_149;
wire    ap_CS_fsm_state7;
reg   [1:0] i6_0_reg_160;
wire    ap_CS_fsm_state9;
wire  signed [63:0] sext_ln35_fu_455_p1;
wire   [31:0] select_ln11_fu_232_p3;
wire   [0:0] trunc_ln11_1_fu_228_p1;
wire   [31:0] select_ln20_fu_278_p3;
wire   [0:0] trunc_ln20_fu_274_p1;
reg   [31:0] y_1_fu_62;
wire   [31:0] y_1_6_fu_417_p3;
reg   [31:0] y_1_3_fu_66;
wire   [31:0] y_1_5_fu_410_p3;
wire   [0:0] trunc_ln28_1_fu_363_p1;
wire   [31:0] select_ln28_1_fu_367_p3;
wire   [31:0] select_ln28_fu_373_p3;
wire  signed [31:0] select_ln28_4_fu_379_p3;
wire  signed [31:0] select_ln28_2_fu_386_p3;
wire   [31:0] select_ln28_3_fu_398_p3;
wire   [31:0] y_0_fu_405_p2;
wire   [31:0] zext_ln33_fu_434_p1;
wire   [31:0] add_ln35_fu_450_p2;
wire   [0:0] trunc_ln35_fu_460_p1;
wire   [31:0] select_ln35_fu_464_p3;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 A_1_0 = 32'd0;
#0 A_1_1 = 32'd0;
#0 x_0 = 32'd0;
#0 x_1 = 32'd0;
#0 A_0_0 = 32'd0;
#0 A_0_1 = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_reg_506 == 1'd1) & (icmp_ln19_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i3_0_reg_127 <= i_3_fu_268_p2;
    end else if ((~(((io_acc_block_signal_op36 == 1'b0) & (ap_predicate_op36_read_state2 == 1'b1)) | ((icmp_ln8_fu_178_p2 == 1'd0) & (io_acc_block_signal_op28 == 1'b0))) & (icmp_ln17_fu_202_p2 == 1'd1) & (icmp_ln8_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i3_0_reg_127 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        i4_0_reg_138 <= i_1_reg_589;
    end else if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln19_fu_262_p2 == 1'd1) | (icmp_ln17_reg_506 == 1'd0)))) begin
        i4_0_reg_138 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_330_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i6_0_reg_160 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i6_0_reg_160 <= i_4_reg_623;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_105 <= i_reg_482;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_105 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j5_0_reg_149 <= j_1_reg_610;
    end else if (((icmp_ln26_fu_330_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j5_0_reg_149 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_reg_116 <= j_fu_222_p2;
    end else if ((~(((io_acc_block_signal_op36 == 1'b0) & (ap_predicate_op36_read_state2 == 1'b1)) | ((icmp_ln8_fu_178_p2 == 1'd0) & (io_acc_block_signal_op28 == 1'b0))) & (icmp_ln8_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_116 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        y_1_3_fu_66 <= y_1_5_fu_410_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln19_fu_262_p2 == 1'd1) | (icmp_ln17_reg_506 == 1'd0)))) begin
        y_1_3_fu_66 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        y_1_fu_62 <= y_1_6_fu_417_p3;
    end else if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln19_fu_262_p2 == 1'd1) | (icmp_ln17_reg_506 == 1'd0)))) begin
        y_1_fu_62 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln11_1_fu_228_p1 == 1'd0) & (icmp_ln10_fu_216_p2 == 1'd0) & (trunc_ln11_reg_497 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        A_0_0 <= select_ln11_fu_232_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln19_fu_262_p2 == 1'd1) | (icmp_ln17_reg_506 == 1'd0)))) begin
        A_0_0_load_reg_576 <= A_0_0;
        A_0_1_load_reg_581 <= A_0_1;
        A_1_0_load_reg_556 <= A_1_0;
        A_1_1_load_reg_561 <= A_1_1;
        x_0_load_reg_566 <= x_0;
        x_1_load_reg_571 <= x_1;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln11_1_fu_228_p1 == 1'd1) & (icmp_ln10_fu_216_p2 == 1'd0) & (trunc_ln11_reg_497 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        A_0_1 <= select_ln11_fu_232_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln11_reg_497 == 1'd1) & (trunc_ln11_1_fu_228_p1 == 1'd0) & (icmp_ln10_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        A_1_0 <= select_ln11_fu_232_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln11_1_fu_228_p1 == 1'd1) & (trunc_ln11_reg_497 == 1'd1) & (icmp_ln10_fu_216_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        A_1_1 <= select_ln11_fu_232_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_1_reg_589 <= i_1_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_4_reg_623 <= i_4_fu_444_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((io_acc_block_signal_op36 == 1'b0) & (ap_predicate_op36_read_state2 == 1'b1)) | ((icmp_ln8_fu_178_p2 == 1'd0) & (io_acc_block_signal_op28 == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_482 <= i_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((io_acc_block_signal_op36 == 1'b0) & (ap_predicate_op36_read_state2 == 1'b1)) | ((icmp_ln8_fu_178_p2 == 1'd0) & (io_acc_block_signal_op28 == 1'b0))) & (icmp_ln8_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln17_reg_506 <= icmp_ln17_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_1_reg_610 <= j_1_fu_357_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln27_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        mul_ln28_reg_615 <= mul_ln28_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_330_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        shl_ln35_reg_602[31 : 1] <= shl_ln35_fu_346_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((~(((io_acc_block_signal_op36 == 1'b0) & (ap_predicate_op36_read_state2 == 1'b1)) | ((icmp_ln8_fu_178_p2 == 1'd0) & (io_acc_block_signal_op28 == 1'b0))) & (icmp_ln17_fu_202_p2 == 1'd1) & (icmp_ln8_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_vec_0_1_reg_510 <= xtile_V_vec_0_dout;
        tmp_vec_1_1_reg_515 <= xtile_V_vec_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((io_acc_block_signal_op36 == 1'b0) & (ap_predicate_op36_read_state2 == 1'b1)) | ((icmp_ln8_fu_178_p2 == 1'd0) & (io_acc_block_signal_op28 == 1'b0))) & (icmp_ln8_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_vec_0_reg_487 <= Atile_V_vec_0_dout;
        tmp_vec_1_reg_492 <= Atile_V_vec_1_dout;
        trunc_ln11_reg_497 <= trunc_ln11_fu_198_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_330_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        trunc_ln28_reg_594 <= trunc_ln28_fu_342_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_reg_506 == 1'd1) & (trunc_ln20_fu_274_p1 == 1'd0) & (icmp_ln19_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        x_0 <= select_ln20_fu_278_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln20_fu_274_p1 == 1'd1) & (icmp_ln17_reg_506 == 1'd1) & (icmp_ln19_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        x_1 <= select_ln20_fu_278_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        ypartial_addr_reg_628 <= sext_ln35_fu_455_p1;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Atile_V_vec_0_blk_n = Atile_V_vec_0_empty_n;
    end else begin
        Atile_V_vec_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((io_acc_block_signal_op36 == 1'b0) & (ap_predicate_op36_read_state2 == 1'b1)) | ((icmp_ln8_fu_178_p2 == 1'd0) & (io_acc_block_signal_op28 == 1'b0))) & (icmp_ln8_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Atile_V_vec_0_read = 1'b1;
    end else begin
        Atile_V_vec_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Atile_V_vec_1_blk_n = Atile_V_vec_1_empty_n;
    end else begin
        Atile_V_vec_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((io_acc_block_signal_op36 == 1'b0) & (ap_predicate_op36_read_state2 == 1'b1)) | ((icmp_ln8_fu_178_p2 == 1'd0) & (io_acc_block_signal_op28 == 1'b0))) & (icmp_ln8_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Atile_V_vec_1_read = 1'b1;
    end else begin
        Atile_V_vec_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_202_p2 == 1'd1) & (icmp_ln8_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        xtile_V_vec_0_blk_n = xtile_V_vec_0_empty_n;
    end else begin
        xtile_V_vec_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((io_acc_block_signal_op36 == 1'b0) & (ap_predicate_op36_read_state2 == 1'b1)) | ((icmp_ln8_fu_178_p2 == 1'd0) & (io_acc_block_signal_op28 == 1'b0))) & (ap_predicate_op36_read_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        xtile_V_vec_0_read = 1'b1;
    end else begin
        xtile_V_vec_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_202_p2 == 1'd1) & (icmp_ln8_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        xtile_V_vec_1_blk_n = xtile_V_vec_1_empty_n;
    end else begin
        xtile_V_vec_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((io_acc_block_signal_op36 == 1'b0) & (ap_predicate_op36_read_state2 == 1'b1)) | ((icmp_ln8_fu_178_p2 == 1'd0) & (io_acc_block_signal_op28 == 1'b0))) & (ap_predicate_op36_read_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        xtile_V_vec_1_read = 1'b1;
    end else begin
        xtile_V_vec_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ypartial_address0 = ypartial_addr_reg_628;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        ypartial_address0 = sext_ln35_fu_455_p1;
    end else begin
        ypartial_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        ypartial_ce0 = 1'b1;
    end else begin
        ypartial_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ypartial_we0 = 1'b1;
    end else begin
        ypartial_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((io_acc_block_signal_op36 == 1'b0) & (ap_predicate_op36_read_state2 == 1'b1)) | ((icmp_ln8_fu_178_p2 == 1'd0) & (io_acc_block_signal_op28 == 1'b0))) & (icmp_ln8_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~(((io_acc_block_signal_op36 == 1'b0) & (ap_predicate_op36_read_state2 == 1'b1)) | ((icmp_ln8_fu_178_p2 == 1'd0) & (io_acc_block_signal_op28 == 1'b0))) & (icmp_ln8_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln10_fu_216_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln19_fu_262_p2 == 1'd1) | (icmp_ln17_reg_506 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln26_fu_330_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln27_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln33_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_fu_450_p2 = (zext_ln33_fu_434_p1 + shl_ln35_reg_602);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state2 = (((io_acc_block_signal_op36 == 1'b0) & (ap_predicate_op36_read_state2 == 1'b1)) | ((icmp_ln8_fu_178_p2 == 1'd0) & (io_acc_block_signal_op28 == 1'b0)));
end

always @ (*) begin
    ap_predicate_op36_read_state2 = ((icmp_ln17_fu_202_p2 == 1'd1) & (icmp_ln8_fu_178_p2 == 1'd1));
end

assign i_1_fu_336_p2 = (i4_0_reg_138 + 2'd1);

assign i_3_fu_268_p2 = (i3_0_reg_127 + 2'd1);

assign i_4_fu_444_p2 = (i6_0_reg_160 + 2'd1);

assign i_fu_184_p2 = (i_0_reg_105 + 2'd1);

assign icmp_ln10_fu_216_p2 = ((j_0_reg_116 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_202_p2 = ((i2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_262_p2 = ((i3_0_reg_127 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_330_p2 = ((i4_0_reg_138 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_351_p2 = ((j5_0_reg_149 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_438_p2 = ((i6_0_reg_160 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_178_p2 = ((i_0_reg_105 == 2'd2) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op28 = (Atile_V_vec_1_empty_n & Atile_V_vec_0_empty_n);

assign io_acc_block_signal_op36 = (xtile_V_vec_1_empty_n & xtile_V_vec_0_empty_n);

assign j_1_fu_357_p2 = (j5_0_reg_149 + 2'd1);

assign j_fu_222_p2 = (j_0_reg_116 + 2'd1);

assign mul_ln28_fu_392_p2 = ($signed(select_ln28_4_fu_379_p3) * $signed(select_ln28_2_fu_386_p3));

assign select_ln11_fu_232_p3 = ((trunc_ln11_1_fu_228_p1[0:0] === 1'b1) ? tmp_vec_1_reg_492 : tmp_vec_0_reg_487);

assign select_ln20_fu_278_p3 = ((trunc_ln20_fu_274_p1[0:0] === 1'b1) ? tmp_vec_1_1_reg_515 : tmp_vec_0_1_reg_510);

assign select_ln28_1_fu_367_p3 = ((trunc_ln28_1_fu_363_p1[0:0] === 1'b1) ? A_1_1_load_reg_561 : A_1_0_load_reg_556);

assign select_ln28_2_fu_386_p3 = ((trunc_ln28_1_fu_363_p1[0:0] === 1'b1) ? x_1_load_reg_571 : x_0_load_reg_566);

assign select_ln28_3_fu_398_p3 = ((trunc_ln28_reg_594[0:0] === 1'b1) ? y_1_3_fu_66 : y_1_fu_62);

assign select_ln28_4_fu_379_p3 = ((trunc_ln28_reg_594[0:0] === 1'b1) ? select_ln28_1_fu_367_p3 : select_ln28_fu_373_p3);

assign select_ln28_fu_373_p3 = ((trunc_ln28_1_fu_363_p1[0:0] === 1'b1) ? A_0_1_load_reg_581 : A_0_0_load_reg_576);

assign select_ln35_fu_464_p3 = ((trunc_ln35_fu_460_p1[0:0] === 1'b1) ? y_1_3_fu_66 : y_1_fu_62);

assign sext_ln35_fu_455_p1 = $signed(add_ln35_fu_450_p2);

assign shl_ln35_fu_346_p2 = i2 << 32'd1;

assign trunc_ln11_1_fu_228_p1 = j_0_reg_116[0:0];

assign trunc_ln11_fu_198_p1 = i_0_reg_105[0:0];

assign trunc_ln20_fu_274_p1 = i3_0_reg_127[0:0];

assign trunc_ln28_1_fu_363_p1 = j5_0_reg_149[0:0];

assign trunc_ln28_fu_342_p1 = i4_0_reg_138[0:0];

assign trunc_ln35_fu_460_p1 = i6_0_reg_160[0:0];

assign y_0_fu_405_p2 = (mul_ln28_reg_615 + select_ln28_3_fu_398_p3);

assign y_1_5_fu_410_p3 = ((trunc_ln28_reg_594[0:0] === 1'b1) ? y_0_fu_405_p2 : y_1_3_fu_66);

assign y_1_6_fu_417_p3 = ((trunc_ln28_reg_594[0:0] === 1'b1) ? y_1_fu_62 : y_0_fu_405_p2);

assign ypartial_d0 = (ypartial_q0 + select_ln35_fu_464_p3);

assign zext_ln33_fu_434_p1 = i6_0_reg_160;

always @ (posedge ap_clk) begin
    shl_ln35_reg_602[0] <= 1'b0;
end

endmodule //tiled_matvec
