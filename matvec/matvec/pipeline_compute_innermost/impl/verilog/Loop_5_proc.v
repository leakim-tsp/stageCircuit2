// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_5_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        y_address0,
        y_ce0,
        y_q0,
        i2_load_loc_dout,
        i2_load_loc_empty_n,
        i2_load_loc_read,
        ypartial_address0,
        ypartial_ce0,
        ypartial_we0,
        ypartial_d0,
        ypartial_q0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [0:0] y_address0;
output   y_ce0;
input  [31:0] y_q0;
input  [31:0] i2_load_loc_dout;
input   i2_load_loc_empty_n;
output   i2_load_loc_read;
output  [2:0] ypartial_address0;
output   ypartial_ce0;
output   ypartial_we0;
output  [31:0] ypartial_d0;
input  [31:0] ypartial_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ce0;
reg i2_load_loc_read;
reg[2:0] ypartial_address0;
reg ypartial_ce0;
reg ypartial_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    i2_load_loc_blk_n;
wire   [31:0] shl_ln35_fu_79_p2;
reg   [31:0] shl_ln35_reg_123;
reg    ap_block_state1;
wire   [1:0] i_fu_95_p2;
reg   [1:0] i_reg_131;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln33_fu_89_p2;
reg   [2:0] ypartial_addr_reg_141;
reg   [1:0] i6_0_i_i_reg_68;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln35_fu_101_p1;
wire  signed [63:0] sext_ln35_fu_111_p1;
wire   [31:0] zext_ln33_fu_85_p1;
wire   [31:0] add_ln35_fu_106_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln33_fu_89_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (i2_load_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i6_0_i_i_reg_68 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i6_0_i_i_reg_68 <= i_reg_131;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_131 <= i_fu_95_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (i2_load_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        shl_ln35_reg_123[31 : 1] <= shl_ln35_fu_79_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_89_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ypartial_addr_reg_141 <= sext_ln35_fu_111_p1;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_89_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_89_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i2_load_loc_blk_n = i2_load_loc_empty_n;
    end else begin
        i2_load_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (i2_load_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i2_load_loc_read = 1'b1;
    end else begin
        i2_load_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_ce0 = 1'b1;
    end else begin
        y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ypartial_address0 = ypartial_addr_reg_141;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ypartial_address0 = sext_ln35_fu_111_p1;
    end else begin
        ypartial_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        ypartial_ce0 = 1'b1;
    end else begin
        ypartial_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ypartial_we0 = 1'b1;
    end else begin
        ypartial_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (i2_load_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln33_fu_89_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_fu_106_p2 = (shl_ln35_reg_123 + zext_ln33_fu_85_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (i2_load_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign i_fu_95_p2 = (i6_0_i_i_reg_68 + 2'd1);

assign icmp_ln33_fu_89_p2 = ((i6_0_i_i_reg_68 == 2'd2) ? 1'b1 : 1'b0);

assign sext_ln35_fu_111_p1 = $signed(add_ln35_fu_106_p2);

assign shl_ln35_fu_79_p2 = i2_load_loc_dout << 32'd1;

assign y_address0 = zext_ln35_fu_101_p1;

assign ypartial_d0 = (y_q0 + ypartial_q0);

assign zext_ln33_fu_85_p1 = i6_0_i_i_reg_68;

assign zext_ln35_fu_101_p1 = i6_0_i_i_reg_68;

always @ (posedge ap_clk) begin
    shl_ln35_reg_123[0] <= 1'b0;
end

endmodule //Loop_5_proc
