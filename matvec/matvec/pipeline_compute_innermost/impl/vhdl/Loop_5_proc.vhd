-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_5_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    y_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    y_ce0 : OUT STD_LOGIC;
    y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    i2_load_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    i2_load_loc_empty_n : IN STD_LOGIC;
    i2_load_loc_read : OUT STD_LOGIC;
    ypartial_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ypartial_ce0 : OUT STD_LOGIC;
    ypartial_we0 : OUT STD_LOGIC;
    ypartial_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ypartial_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Loop_5_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i2_load_loc_blk_n : STD_LOGIC;
    signal shl_ln35_fu_79_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln35_reg_123 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_fu_95_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_131 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln33_fu_89_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ypartial_addr_reg_141 : STD_LOGIC_VECTOR (2 downto 0);
    signal i6_0_i_i_reg_68 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln35_fu_101_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln35_fu_111_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33_fu_85_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_fu_106_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln33_fu_89_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i6_0_i_i_reg_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (i2_load_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i6_0_i_i_reg_68 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i6_0_i_i_reg_68 <= i_reg_131;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_131 <= i_fu_95_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (i2_load_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    shl_ln35_reg_123(31 downto 1) <= shl_ln35_fu_79_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_89_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                ypartial_addr_reg_141 <= sext_ln35_fu_111_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    shl_ln35_reg_123(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, i2_load_loc_empty_n, ap_CS_fsm_state2, icmp_ln33_fu_89_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (i2_load_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln33_fu_89_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln35_fu_106_p2 <= std_logic_vector(unsigned(shl_ln35_reg_123) + unsigned(zext_ln33_fu_85_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, i2_load_loc_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (i2_load_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln33_fu_89_p2)
    begin
        if (((icmp_ln33_fu_89_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln33_fu_89_p2)
    begin
        if (((icmp_ln33_fu_89_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    i2_load_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, i2_load_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            i2_load_loc_blk_n <= i2_load_loc_empty_n;
        else 
            i2_load_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    i2_load_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, i2_load_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (i2_load_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            i2_load_loc_read <= ap_const_logic_1;
        else 
            i2_load_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_95_p2 <= std_logic_vector(unsigned(i6_0_i_i_reg_68) + unsigned(ap_const_lv2_1));
    icmp_ln33_fu_89_p2 <= "1" when (i6_0_i_i_reg_68 = ap_const_lv2_2) else "0";
        sext_ln35_fu_111_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln35_fu_106_p2),64));

    shl_ln35_fu_79_p2 <= std_logic_vector(shift_left(unsigned(i2_load_loc_dout),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    y_address0 <= zext_ln35_fu_101_p1(1 - 1 downto 0);

    y_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            y_ce0 <= ap_const_logic_1;
        else 
            y_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ypartial_address0_assign_proc : process(ap_CS_fsm_state2, ypartial_addr_reg_141, ap_CS_fsm_state3, sext_ln35_fu_111_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ypartial_address0 <= ypartial_addr_reg_141;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ypartial_address0 <= sext_ln35_fu_111_p1(3 - 1 downto 0);
        else 
            ypartial_address0 <= "XXX";
        end if; 
    end process;


    ypartial_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ypartial_ce0 <= ap_const_logic_1;
        else 
            ypartial_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ypartial_d0 <= std_logic_vector(unsigned(y_q0) + unsigned(ypartial_q0));

    ypartial_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ypartial_we0 <= ap_const_logic_1;
        else 
            ypartial_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln33_fu_85_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i6_0_i_i_reg_68),32));
    zext_ln35_fu_101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i6_0_i_i_reg_68),64));
end behav;
