// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Loop_1_proc10_HH_
#define _Loop_1_proc10_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Loop_1_proc10 : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > Atile_V_vec_0_dout;
    sc_in< sc_logic > Atile_V_vec_0_empty_n;
    sc_out< sc_logic > Atile_V_vec_0_read;
    sc_in< sc_lv<32> > Atile_V_vec_1_dout;
    sc_in< sc_logic > Atile_V_vec_1_empty_n;
    sc_out< sc_logic > Atile_V_vec_1_read;
    sc_out< sc_lv<32> > A_din;
    sc_in< sc_logic > A_full_n;
    sc_out< sc_logic > A_write;


    // Module declarations
    Loop_1_proc10(sc_module_name name);
    SC_HAS_PROCESS(Loop_1_proc10);

    ~Loop_1_proc10();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > Atile_V_vec_0_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln8_fu_81_p2;
    sc_signal< sc_logic > Atile_V_vec_1_blk_n;
    sc_signal< sc_logic > A_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln10_reg_142;
    sc_signal< sc_lv<2> > j_0_i_i_i_reg_70;
    sc_signal< sc_logic > io_acc_block_signal_op15;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<2> > i_fu_87_p2;
    sc_signal< sc_lv<2> > i_reg_127;
    sc_signal< sc_lv<32> > tmp_vec_0_reg_132;
    sc_signal< sc_lv<32> > tmp_vec_1_reg_137;
    sc_signal< sc_lv<1> > icmp_ln10_fu_101_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<2> > j_fu_107_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > trunc_ln11_fu_113_p1;
    sc_signal< sc_lv<1> > trunc_ln11_reg_151;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_lv<2> > i_0_i_i_i_reg_59;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_blk_n();
    void thread_A_din();
    void thread_A_write();
    void thread_Atile_V_vec_0_blk_n();
    void thread_Atile_V_vec_0_read();
    void thread_Atile_V_vec_1_blk_n();
    void thread_Atile_V_vec_1_read();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_i_fu_87_p2();
    void thread_icmp_ln10_fu_101_p2();
    void thread_icmp_ln8_fu_81_p2();
    void thread_io_acc_block_signal_op15();
    void thread_j_fu_107_p2();
    void thread_trunc_ln11_fu_113_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
