// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Loop_5_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Loop_5_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Loop_5_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> Loop_5_proc::ap_ST_fsm_state1 = "1";
const sc_lv<3> Loop_5_proc::ap_ST_fsm_state2 = "10";
const sc_lv<3> Loop_5_proc::ap_ST_fsm_state3 = "100";
const sc_lv<32> Loop_5_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Loop_5_proc::ap_const_lv32_1 = "1";
const sc_lv<1> Loop_5_proc::ap_const_lv1_0 = "0";
const sc_lv<32> Loop_5_proc::ap_const_lv32_2 = "10";
const sc_lv<2> Loop_5_proc::ap_const_lv2_0 = "00";
const sc_lv<2> Loop_5_proc::ap_const_lv2_2 = "10";
const sc_lv<2> Loop_5_proc::ap_const_lv2_1 = "1";
const sc_lv<1> Loop_5_proc::ap_const_lv1_1 = "1";
const bool Loop_5_proc::ap_const_boolean_1 = true;

Loop_5_proc::Loop_5_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln35_fu_106_p2);
    sensitive << ( shl_ln35_reg_123 );
    sensitive << ( zext_ln33_fu_85_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( i2_load_loc_empty_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln33_fu_89_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln33_fu_89_p2 );

    SC_METHOD(thread_i2_load_loc_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( i2_load_loc_empty_n );

    SC_METHOD(thread_i2_load_loc_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( i2_load_loc_empty_n );

    SC_METHOD(thread_i_fu_95_p2);
    sensitive << ( i6_0_i_i_reg_68 );

    SC_METHOD(thread_icmp_ln33_fu_89_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i6_0_i_i_reg_68 );

    SC_METHOD(thread_sext_ln35_fu_111_p1);
    sensitive << ( add_ln35_fu_106_p2 );

    SC_METHOD(thread_shl_ln35_fu_79_p2);
    sensitive << ( i2_load_loc_dout );

    SC_METHOD(thread_y_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln35_fu_101_p1 );

    SC_METHOD(thread_y_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ypartial_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ypartial_addr_reg_141 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( sext_ln35_fu_111_p1 );

    SC_METHOD(thread_ypartial_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ypartial_d0);
    sensitive << ( y_q0 );
    sensitive << ( ypartial_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ypartial_we0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_zext_ln33_fu_85_p1);
    sensitive << ( i6_0_i_i_reg_68 );

    SC_METHOD(thread_zext_ln35_fu_101_p1);
    sensitive << ( i6_0_i_i_reg_68 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( i2_load_loc_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln33_fu_89_p2 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Loop_5_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, y_address0, "(port)y_address0");
    sc_trace(mVcdFile, y_ce0, "(port)y_ce0");
    sc_trace(mVcdFile, y_q0, "(port)y_q0");
    sc_trace(mVcdFile, i2_load_loc_dout, "(port)i2_load_loc_dout");
    sc_trace(mVcdFile, i2_load_loc_empty_n, "(port)i2_load_loc_empty_n");
    sc_trace(mVcdFile, i2_load_loc_read, "(port)i2_load_loc_read");
    sc_trace(mVcdFile, ypartial_address0, "(port)ypartial_address0");
    sc_trace(mVcdFile, ypartial_ce0, "(port)ypartial_ce0");
    sc_trace(mVcdFile, ypartial_we0, "(port)ypartial_we0");
    sc_trace(mVcdFile, ypartial_d0, "(port)ypartial_d0");
    sc_trace(mVcdFile, ypartial_q0, "(port)ypartial_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i2_load_loc_blk_n, "i2_load_loc_blk_n");
    sc_trace(mVcdFile, shl_ln35_fu_79_p2, "shl_ln35_fu_79_p2");
    sc_trace(mVcdFile, shl_ln35_reg_123, "shl_ln35_reg_123");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, i_fu_95_p2, "i_fu_95_p2");
    sc_trace(mVcdFile, i_reg_131, "i_reg_131");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln33_fu_89_p2, "icmp_ln33_fu_89_p2");
    sc_trace(mVcdFile, ypartial_addr_reg_141, "ypartial_addr_reg_141");
    sc_trace(mVcdFile, i6_0_i_i_reg_68, "i6_0_i_i_reg_68");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, zext_ln35_fu_101_p1, "zext_ln35_fu_101_p1");
    sc_trace(mVcdFile, sext_ln35_fu_111_p1, "sext_ln35_fu_111_p1");
    sc_trace(mVcdFile, zext_ln33_fu_85_p1, "zext_ln33_fu_85_p1");
    sc_trace(mVcdFile, add_ln35_fu_106_p2, "add_ln35_fu_106_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Loop_5_proc::~Loop_5_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Loop_5_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(icmp_ln33_fu_89_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, i2_load_loc_empty_n.read())))) {
        i6_0_i_i_reg_68 = ap_const_lv2_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i6_0_i_i_reg_68 = i_reg_131.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_131 = i_fu_95_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, i2_load_loc_empty_n.read())))) {
        shl_ln35_reg_123 = shl_ln35_fu_79_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln33_fu_89_p2.read(), ap_const_lv1_0))) {
        ypartial_addr_reg_141 =  (sc_lv<3>) (sext_ln35_fu_111_p1.read());
    }
}

void Loop_5_proc::thread_add_ln35_fu_106_p2() {
    add_ln35_fu_106_p2 = (!shl_ln35_reg_123.read().is_01() || !zext_ln33_fu_85_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(shl_ln35_reg_123.read()) + sc_biguint<32>(zext_ln33_fu_85_p1.read()));
}

void Loop_5_proc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Loop_5_proc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Loop_5_proc::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Loop_5_proc::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, i2_load_loc_empty_n.read()));
}

void Loop_5_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln33_fu_89_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Loop_5_proc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Loop_5_proc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln33_fu_89_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Loop_5_proc::thread_i2_load_loc_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        i2_load_loc_blk_n = i2_load_loc_empty_n.read();
    } else {
        i2_load_loc_blk_n = ap_const_logic_1;
    }
}

void Loop_5_proc::thread_i2_load_loc_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, i2_load_loc_empty_n.read())))) {
        i2_load_loc_read = ap_const_logic_1;
    } else {
        i2_load_loc_read = ap_const_logic_0;
    }
}

void Loop_5_proc::thread_i_fu_95_p2() {
    i_fu_95_p2 = (!i6_0_i_i_reg_68.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i6_0_i_i_reg_68.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void Loop_5_proc::thread_icmp_ln33_fu_89_p2() {
    icmp_ln33_fu_89_p2 = (!i6_0_i_i_reg_68.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(i6_0_i_i_reg_68.read() == ap_const_lv2_2);
}

void Loop_5_proc::thread_sext_ln35_fu_111_p1() {
    sext_ln35_fu_111_p1 = esl_sext<64,32>(add_ln35_fu_106_p2.read());
}

void Loop_5_proc::thread_shl_ln35_fu_79_p2() {
    shl_ln35_fu_79_p2 = (!ap_const_lv32_1.is_01())? sc_lv<32>(): i2_load_loc_dout.read() << (unsigned short)ap_const_lv32_1.to_uint();
}

void Loop_5_proc::thread_y_address0() {
    y_address0 =  (sc_lv<1>) (zext_ln35_fu_101_p1.read());
}

void Loop_5_proc::thread_y_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        y_ce0 = ap_const_logic_1;
    } else {
        y_ce0 = ap_const_logic_0;
    }
}

void Loop_5_proc::thread_ypartial_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ypartial_address0 = ypartial_addr_reg_141.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ypartial_address0 =  (sc_lv<3>) (sext_ln35_fu_111_p1.read());
    } else {
        ypartial_address0 = "XXX";
    }
}

void Loop_5_proc::thread_ypartial_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        ypartial_ce0 = ap_const_logic_1;
    } else {
        ypartial_ce0 = ap_const_logic_0;
    }
}

void Loop_5_proc::thread_ypartial_d0() {
    ypartial_d0 = (!y_q0.read().is_01() || !ypartial_q0.read().is_01())? sc_lv<32>(): (sc_biguint<32>(y_q0.read()) + sc_biguint<32>(ypartial_q0.read()));
}

void Loop_5_proc::thread_ypartial_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ypartial_we0 = ap_const_logic_1;
    } else {
        ypartial_we0 = ap_const_logic_0;
    }
}

void Loop_5_proc::thread_zext_ln33_fu_85_p1() {
    zext_ln33_fu_85_p1 = esl_zext<32,2>(i6_0_i_i_reg_68.read());
}

void Loop_5_proc::thread_zext_ln35_fu_101_p1() {
    zext_ln35_fu_101_p1 = esl_zext<64,2>(i6_0_i_i_reg_68.read());
}

void Loop_5_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, i2_load_loc_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln33_fu_89_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

