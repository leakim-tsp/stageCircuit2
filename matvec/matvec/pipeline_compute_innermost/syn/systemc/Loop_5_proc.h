// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Loop_5_proc_HH_
#define _Loop_5_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Loop_5_proc : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<1> > y_address0;
    sc_out< sc_logic > y_ce0;
    sc_in< sc_lv<32> > y_q0;
    sc_in< sc_lv<32> > i2_load_loc_dout;
    sc_in< sc_logic > i2_load_loc_empty_n;
    sc_out< sc_logic > i2_load_loc_read;
    sc_out< sc_lv<3> > ypartial_address0;
    sc_out< sc_logic > ypartial_ce0;
    sc_out< sc_logic > ypartial_we0;
    sc_out< sc_lv<32> > ypartial_d0;
    sc_in< sc_lv<32> > ypartial_q0;


    // Module declarations
    Loop_5_proc(sc_module_name name);
    SC_HAS_PROCESS(Loop_5_proc);

    ~Loop_5_proc();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > i2_load_loc_blk_n;
    sc_signal< sc_lv<32> > shl_ln35_fu_79_p2;
    sc_signal< sc_lv<32> > shl_ln35_reg_123;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<2> > i_fu_95_p2;
    sc_signal< sc_lv<2> > i_reg_131;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln33_fu_89_p2;
    sc_signal< sc_lv<3> > ypartial_addr_reg_141;
    sc_signal< sc_lv<2> > i6_0_i_i_reg_68;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > zext_ln35_fu_101_p1;
    sc_signal< sc_lv<64> > sext_ln35_fu_111_p1;
    sc_signal< sc_lv<32> > zext_ln33_fu_85_p1;
    sc_signal< sc_lv<32> > add_ln35_fu_106_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln35_fu_106_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i2_load_loc_blk_n();
    void thread_i2_load_loc_read();
    void thread_i_fu_95_p2();
    void thread_icmp_ln33_fu_89_p2();
    void thread_sext_ln35_fu_111_p1();
    void thread_shl_ln35_fu_79_p2();
    void thread_y_address0();
    void thread_y_ce0();
    void thread_ypartial_address0();
    void thread_ypartial_ce0();
    void thread_ypartial_d0();
    void thread_ypartial_we0();
    void thread_zext_ln33_fu_85_p1();
    void thread_zext_ln35_fu_101_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
