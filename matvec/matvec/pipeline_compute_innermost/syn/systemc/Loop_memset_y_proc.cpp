// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Loop_memset_y_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Loop_memset_y_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Loop_memset_y_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> Loop_memset_y_proc::ap_ST_fsm_state1 = "1";
const sc_lv<5> Loop_memset_y_proc::ap_ST_fsm_state2 = "10";
const sc_lv<5> Loop_memset_y_proc::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<5> Loop_memset_y_proc::ap_ST_fsm_pp0_stage1 = "1000";
const sc_lv<5> Loop_memset_y_proc::ap_ST_fsm_state7 = "10000";
const sc_lv<32> Loop_memset_y_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool Loop_memset_y_proc::ap_const_boolean_1 = true;
const sc_lv<32> Loop_memset_y_proc::ap_const_lv32_3 = "11";
const bool Loop_memset_y_proc::ap_const_boolean_0 = false;
const sc_lv<1> Loop_memset_y_proc::ap_const_lv1_0 = "0";
const sc_lv<32> Loop_memset_y_proc::ap_const_lv32_1 = "1";
const sc_lv<32> Loop_memset_y_proc::ap_const_lv32_2 = "10";
const sc_lv<1> Loop_memset_y_proc::ap_const_lv1_1 = "1";
const sc_lv<3> Loop_memset_y_proc::ap_const_lv3_0 = "000";
const sc_lv<2> Loop_memset_y_proc::ap_const_lv2_0 = "00";
const sc_lv<3> Loop_memset_y_proc::ap_const_lv3_4 = "100";
const sc_lv<3> Loop_memset_y_proc::ap_const_lv3_1 = "1";
const sc_lv<2> Loop_memset_y_proc::ap_const_lv2_2 = "10";
const sc_lv<2> Loop_memset_y_proc::ap_const_lv2_1 = "1";
const sc_lv<32> Loop_memset_y_proc::ap_const_lv32_4 = "100";

Loop_memset_y_proc::Loop_memset_y_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_blk_n);
    sensitive << ( A_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( icmp_ln26_reg_226 );

    SC_METHOD(thread_A_read);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln26_reg_226 );
    sensitive << ( ap_block_pp0_stage1_11001 );

    SC_METHOD(thread_add_ln26_1_fu_183_p2);
    sensitive << ( ap_phi_mux_i4_0_i_phi_fu_128_p4 );

    SC_METHOD(thread_add_ln26_fu_163_p2);
    sensitive << ( ap_phi_mux_indvar_flatten_phi_fu_117_p4 );

    SC_METHOD(thread_add_ln28_fu_215_p2);
    sensitive << ( y_q0 );
    sensitive << ( mul_ln28_reg_266 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);
    sensitive << ( A_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln26_reg_226 );

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);
    sensitive << ( A_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln26_reg_226 );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage1_iter0);
    sensitive << ( A_empty_n );
    sensitive << ( icmp_ln26_reg_226 );

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state6_pp0_stage1_iter1);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( icmp_ln26_fu_157_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_i4_0_i_phi_fu_128_p4);
    sensitive << ( icmp_ln26_reg_226 );
    sensitive << ( i4_0_i_reg_124 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( select_ln28_1_reg_240 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_indvar_flatten_phi_fu_117_p4);
    sensitive << ( icmp_ln26_reg_226 );
    sensitive << ( indvar_flatten_reg_113 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( add_ln26_reg_230 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_j5_0_i_phi_fu_139_p4);
    sensitive << ( icmp_ln26_reg_226 );
    sensitive << ( j5_0_i_reg_135 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( j_reg_261 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_phi_mux_phi_ln25_i_phi_fu_105_p4);
    sensitive << ( phi_ln25_i_reg_101 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_icmp_ln26_fu_157_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_indvar_flatten_phi_fu_117_p4 );

    SC_METHOD(thread_icmp_ln27_fu_169_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln26_fu_157_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_j5_0_i_phi_fu_139_p4 );

    SC_METHOD(thread_j_fu_202_p2);
    sensitive << ( select_ln28_reg_235 );

    SC_METHOD(thread_mul_ln28_fu_211_p2);
    sensitive << ( A_read_reg_251 );
    sensitive << ( x_load_reg_256 );

    SC_METHOD(thread_select_ln28_1_fu_189_p3);
    sensitive << ( ap_phi_mux_i4_0_i_phi_fu_128_p4 );
    sensitive << ( icmp_ln27_fu_169_p2 );
    sensitive << ( add_ln26_1_fu_183_p2 );

    SC_METHOD(thread_select_ln28_fu_175_p3);
    sensitive << ( ap_phi_mux_j5_0_i_phi_fu_139_p4 );
    sensitive << ( icmp_ln27_fu_169_p2 );

    SC_METHOD(thread_x_address0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln28_1_fu_197_p1 );

    SC_METHOD(thread_x_ce0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_xor_ln25_fu_151_p2);
    sensitive << ( phi_ln25_i_reg_101 );

    SC_METHOD(thread_y_address0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( y_addr_1_reg_271 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln25_fu_146_p1 );
    sensitive << ( zext_ln28_fu_207_p1 );

    SC_METHOD(thread_y_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_y_d0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( add_ln28_fu_215_p2 );

    SC_METHOD(thread_y_we0);
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln26_reg_226_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_zext_ln25_fu_146_p1);
    sensitive << ( phi_ln25_i_reg_101 );

    SC_METHOD(thread_zext_ln28_1_fu_197_p1);
    sensitive << ( select_ln28_fu_175_p3 );

    SC_METHOD(thread_zext_ln28_fu_207_p1);
    sensitive << ( select_ln28_1_reg_240 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln26_fu_157_p2 );
    sensitive << ( ap_phi_mux_phi_ln25_i_phi_fu_105_p4 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage1_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "00001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Loop_memset_y_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, y_address0, "(port)y_address0");
    sc_trace(mVcdFile, y_ce0, "(port)y_ce0");
    sc_trace(mVcdFile, y_we0, "(port)y_we0");
    sc_trace(mVcdFile, y_d0, "(port)y_d0");
    sc_trace(mVcdFile, y_q0, "(port)y_q0");
    sc_trace(mVcdFile, A_dout, "(port)A_dout");
    sc_trace(mVcdFile, A_empty_n, "(port)A_empty_n");
    sc_trace(mVcdFile, A_read, "(port)A_read");
    sc_trace(mVcdFile, x_address0, "(port)x_address0");
    sc_trace(mVcdFile, x_ce0, "(port)x_ce0");
    sc_trace(mVcdFile, x_q0, "(port)x_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, A_blk_n, "A_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, icmp_ln26_reg_226, "icmp_ln26_reg_226");
    sc_trace(mVcdFile, indvar_flatten_reg_113, "indvar_flatten_reg_113");
    sc_trace(mVcdFile, i4_0_i_reg_124, "i4_0_i_reg_124");
    sc_trace(mVcdFile, j5_0_i_reg_135, "j5_0_i_reg_135");
    sc_trace(mVcdFile, xor_ln25_fu_151_p2, "xor_ln25_fu_151_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln26_fu_157_p2, "icmp_ln26_fu_157_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter1, "ap_block_state5_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, icmp_ln26_reg_226_pp0_iter1_reg, "icmp_ln26_reg_226_pp0_iter1_reg");
    sc_trace(mVcdFile, add_ln26_fu_163_p2, "add_ln26_fu_163_p2");
    sc_trace(mVcdFile, add_ln26_reg_230, "add_ln26_reg_230");
    sc_trace(mVcdFile, select_ln28_fu_175_p3, "select_ln28_fu_175_p3");
    sc_trace(mVcdFile, select_ln28_reg_235, "select_ln28_reg_235");
    sc_trace(mVcdFile, select_ln28_1_fu_189_p3, "select_ln28_1_fu_189_p3");
    sc_trace(mVcdFile, select_ln28_1_reg_240, "select_ln28_1_reg_240");
    sc_trace(mVcdFile, A_read_reg_251, "A_read_reg_251");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage1_iter0, "ap_block_state4_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage1_iter1, "ap_block_state6_pp0_stage1_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, x_load_reg_256, "x_load_reg_256");
    sc_trace(mVcdFile, j_fu_202_p2, "j_fu_202_p2");
    sc_trace(mVcdFile, j_reg_261, "j_reg_261");
    sc_trace(mVcdFile, mul_ln28_fu_211_p2, "mul_ln28_fu_211_p2");
    sc_trace(mVcdFile, mul_ln28_reg_266, "mul_ln28_reg_266");
    sc_trace(mVcdFile, y_addr_1_reg_271, "y_addr_1_reg_271");
    sc_trace(mVcdFile, ap_phi_mux_phi_ln25_i_phi_fu_105_p4, "ap_phi_mux_phi_ln25_i_phi_fu_105_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, phi_ln25_i_reg_101, "phi_ln25_i_reg_101");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_phi_mux_indvar_flatten_phi_fu_117_p4, "ap_phi_mux_indvar_flatten_phi_fu_117_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_phi_mux_i4_0_i_phi_fu_128_p4, "ap_phi_mux_i4_0_i_phi_fu_128_p4");
    sc_trace(mVcdFile, ap_phi_mux_j5_0_i_phi_fu_139_p4, "ap_phi_mux_j5_0_i_phi_fu_139_p4");
    sc_trace(mVcdFile, zext_ln25_fu_146_p1, "zext_ln25_fu_146_p1");
    sc_trace(mVcdFile, zext_ln28_1_fu_197_p1, "zext_ln28_1_fu_197_p1");
    sc_trace(mVcdFile, zext_ln28_fu_207_p1, "zext_ln28_fu_207_p1");
    sc_trace(mVcdFile, add_ln28_fu_215_p2, "add_ln28_fu_215_p2");
    sc_trace(mVcdFile, icmp_ln27_fu_169_p2, "icmp_ln27_fu_169_p2");
    sc_trace(mVcdFile, add_ln26_1_fu_183_p2, "add_ln26_1_fu_183_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

Loop_memset_y_proc::~Loop_memset_y_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Loop_memset_y_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_phi_mux_phi_ln25_i_phi_fu_105_p4.read(), ap_const_lv1_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_phi_mux_phi_ln25_i_phi_fu_105_p4.read(), ap_const_lv1_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_phi_mux_phi_ln25_i_phi_fu_105_p4.read(), ap_const_lv1_1))) {
        i4_0_i_reg_124 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(icmp_ln26_reg_226.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        i4_0_i_reg_124 = select_ln28_1_reg_240.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_phi_mux_phi_ln25_i_phi_fu_105_p4.read(), ap_const_lv1_1))) {
        indvar_flatten_reg_113 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(icmp_ln26_reg_226.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        indvar_flatten_reg_113 = add_ln26_reg_230.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_phi_mux_phi_ln25_i_phi_fu_105_p4.read(), ap_const_lv1_1))) {
        j5_0_i_reg_135 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(icmp_ln26_reg_226.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        j5_0_i_reg_135 = j_reg_261.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, ap_phi_mux_phi_ln25_i_phi_fu_105_p4.read()))) {
        phi_ln25_i_reg_101 = xor_ln25_fu_151_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        phi_ln25_i_reg_101 = ap_const_lv1_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(icmp_ln26_reg_226.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        A_read_reg_251 = A_dout.read();
        x_load_reg_256 = x_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        add_ln26_reg_230 = add_ln26_fu_163_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln26_reg_226 = icmp_ln26_fu_157_p2.read();
        icmp_ln26_reg_226_pp0_iter1_reg = icmp_ln26_reg_226.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(icmp_ln26_reg_226.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        j_reg_261 = j_fu_202_p2.read();
    }
    if ((esl_seteq<1,1,1>(icmp_ln26_reg_226.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        mul_ln28_reg_266 = mul_ln28_fu_211_p2.read();
        y_addr_1_reg_271 =  (sc_lv<1>) (zext_ln28_fu_207_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln26_fu_157_p2.read()))) {
        select_ln28_1_reg_240 = select_ln28_1_fu_189_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln26_fu_157_p2.read()))) {
        select_ln28_reg_235 = select_ln28_fu_175_p3.read();
    }
}

void Loop_memset_y_proc::thread_A_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln26_reg_226.read(), ap_const_lv1_0))) {
        A_blk_n = A_empty_n.read();
    } else {
        A_blk_n = ap_const_logic_1;
    }
}

void Loop_memset_y_proc::thread_A_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln26_reg_226.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        A_read = ap_const_logic_1;
    } else {
        A_read = ap_const_logic_0;
    }
}

void Loop_memset_y_proc::thread_add_ln26_1_fu_183_p2() {
    add_ln26_1_fu_183_p2 = (!ap_phi_mux_i4_0_i_phi_fu_128_p4.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(ap_phi_mux_i4_0_i_phi_fu_128_p4.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void Loop_memset_y_proc::thread_add_ln26_fu_163_p2() {
    add_ln26_fu_163_p2 = (!ap_phi_mux_indvar_flatten_phi_fu_117_p4.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(ap_phi_mux_indvar_flatten_phi_fu_117_p4.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void Loop_memset_y_proc::thread_add_ln28_fu_215_p2() {
    add_ln28_fu_215_p2 = (!y_q0.read().is_01() || !mul_ln28_reg_266.read().is_01())? sc_lv<32>(): (sc_biguint<32>(y_q0.read()) + sc_biguint<32>(mul_ln28_reg_266.read()));
}

void Loop_memset_y_proc::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void Loop_memset_y_proc::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[3];
}

void Loop_memset_y_proc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Loop_memset_y_proc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Loop_memset_y_proc::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[4];
}

void Loop_memset_y_proc::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Loop_memset_y_proc::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Loop_memset_y_proc::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Loop_memset_y_proc::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Loop_memset_y_proc::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(icmp_ln26_reg_226.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, A_empty_n.read()));
}

void Loop_memset_y_proc::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(icmp_ln26_reg_226.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, A_empty_n.read()));
}

void Loop_memset_y_proc::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Loop_memset_y_proc::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Loop_memset_y_proc::thread_ap_block_state4_pp0_stage1_iter0() {
    ap_block_state4_pp0_stage1_iter0 = (esl_seteq<1,1,1>(icmp_ln26_reg_226.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, A_empty_n.read()));
}

void Loop_memset_y_proc::thread_ap_block_state5_pp0_stage0_iter1() {
    ap_block_state5_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Loop_memset_y_proc::thread_ap_block_state6_pp0_stage1_iter1() {
    ap_block_state6_pp0_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Loop_memset_y_proc::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(icmp_ln26_fu_157_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void Loop_memset_y_proc::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Loop_memset_y_proc::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void Loop_memset_y_proc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Loop_memset_y_proc::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void Loop_memset_y_proc::thread_ap_phi_mux_i4_0_i_phi_fu_128_p4() {
    if ((esl_seteq<1,1,1>(icmp_ln26_reg_226.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_i4_0_i_phi_fu_128_p4 = select_ln28_1_reg_240.read();
    } else {
        ap_phi_mux_i4_0_i_phi_fu_128_p4 = i4_0_i_reg_124.read();
    }
}

void Loop_memset_y_proc::thread_ap_phi_mux_indvar_flatten_phi_fu_117_p4() {
    if ((esl_seteq<1,1,1>(icmp_ln26_reg_226.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_indvar_flatten_phi_fu_117_p4 = add_ln26_reg_230.read();
    } else {
        ap_phi_mux_indvar_flatten_phi_fu_117_p4 = indvar_flatten_reg_113.read();
    }
}

void Loop_memset_y_proc::thread_ap_phi_mux_j5_0_i_phi_fu_139_p4() {
    if ((esl_seteq<1,1,1>(icmp_ln26_reg_226.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_j5_0_i_phi_fu_139_p4 = j_reg_261.read();
    } else {
        ap_phi_mux_j5_0_i_phi_fu_139_p4 = j5_0_i_reg_135.read();
    }
}

void Loop_memset_y_proc::thread_ap_phi_mux_phi_ln25_i_phi_fu_105_p4() {
    ap_phi_mux_phi_ln25_i_phi_fu_105_p4 = phi_ln25_i_reg_101.read();
}

void Loop_memset_y_proc::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Loop_memset_y_proc::thread_icmp_ln26_fu_157_p2() {
    icmp_ln26_fu_157_p2 = (!ap_phi_mux_indvar_flatten_phi_fu_117_p4.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_indvar_flatten_phi_fu_117_p4.read() == ap_const_lv3_4);
}

void Loop_memset_y_proc::thread_icmp_ln27_fu_169_p2() {
    icmp_ln27_fu_169_p2 = (!ap_phi_mux_j5_0_i_phi_fu_139_p4.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_j5_0_i_phi_fu_139_p4.read() == ap_const_lv2_2);
}

void Loop_memset_y_proc::thread_j_fu_202_p2() {
    j_fu_202_p2 = (!select_ln28_reg_235.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(select_ln28_reg_235.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void Loop_memset_y_proc::thread_mul_ln28_fu_211_p2() {
    mul_ln28_fu_211_p2 = (!A_read_reg_251.read().is_01() || !x_load_reg_256.read().is_01())? sc_lv<32>(): sc_bigint<32>(A_read_reg_251.read()) * sc_bigint<32>(x_load_reg_256.read());
}

void Loop_memset_y_proc::thread_select_ln28_1_fu_189_p3() {
    select_ln28_1_fu_189_p3 = (!icmp_ln27_fu_169_p2.read()[0].is_01())? sc_lv<2>(): ((icmp_ln27_fu_169_p2.read()[0].to_bool())? add_ln26_1_fu_183_p2.read(): ap_phi_mux_i4_0_i_phi_fu_128_p4.read());
}

void Loop_memset_y_proc::thread_select_ln28_fu_175_p3() {
    select_ln28_fu_175_p3 = (!icmp_ln27_fu_169_p2.read()[0].is_01())? sc_lv<2>(): ((icmp_ln27_fu_169_p2.read()[0].to_bool())? ap_const_lv2_0: ap_phi_mux_j5_0_i_phi_fu_139_p4.read());
}

void Loop_memset_y_proc::thread_x_address0() {
    x_address0 =  (sc_lv<1>) (zext_ln28_1_fu_197_p1.read());
}

void Loop_memset_y_proc::thread_x_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        x_ce0 = ap_const_logic_1;
    } else {
        x_ce0 = ap_const_logic_0;
    }
}

void Loop_memset_y_proc::thread_xor_ln25_fu_151_p2() {
    xor_ln25_fu_151_p2 = (phi_ln25_i_reg_101.read() ^ ap_const_lv1_1);
}

void Loop_memset_y_proc::thread_y_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        y_address0 = y_addr_1_reg_271.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        y_address0 =  (sc_lv<1>) (zext_ln28_fu_207_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        y_address0 =  (sc_lv<1>) (zext_ln25_fu_146_p1.read());
    } else {
        y_address0 = "X";
    }
}

void Loop_memset_y_proc::thread_y_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
        y_ce0 = ap_const_logic_1;
    } else {
        y_ce0 = ap_const_logic_0;
    }
}

void Loop_memset_y_proc::thread_y_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        y_d0 = add_ln28_fu_215_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        y_d0 = ap_const_lv32_0;
    } else {
        y_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Loop_memset_y_proc::thread_y_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln26_reg_226_pp0_iter1_reg.read())))) {
        y_we0 = ap_const_logic_1;
    } else {
        y_we0 = ap_const_logic_0;
    }
}

void Loop_memset_y_proc::thread_zext_ln25_fu_146_p1() {
    zext_ln25_fu_146_p1 = esl_zext<64,1>(phi_ln25_i_reg_101.read());
}

void Loop_memset_y_proc::thread_zext_ln28_1_fu_197_p1() {
    zext_ln28_1_fu_197_p1 = esl_zext<64,2>(select_ln28_fu_175_p3.read());
}

void Loop_memset_y_proc::thread_zext_ln28_fu_207_p1() {
    zext_ln28_fu_207_p1 = esl_zext<64,2>(select_ln28_1_reg_240.read());
}

void Loop_memset_y_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_phi_mux_phi_ln25_i_phi_fu_105_p4.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln26_fu_157_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln26_fu_157_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

}

