// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_tiled_matvec_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        i2_dout,
        i2_empty_n,
        i2_read,
        xtile_V_vec_0_dout,
        xtile_V_vec_0_empty_n,
        xtile_V_vec_0_read,
        xtile_V_vec_1_dout,
        xtile_V_vec_1_empty_n,
        xtile_V_vec_1_read,
        x_address0,
        x_ce0,
        x_we0,
        x_d0,
        i2_load_out_out_din,
        i2_load_out_out_full_n,
        i2_load_out_out_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] i2_dout;
input   i2_empty_n;
output   i2_read;
input  [31:0] xtile_V_vec_0_dout;
input   xtile_V_vec_0_empty_n;
output   xtile_V_vec_0_read;
input  [31:0] xtile_V_vec_1_dout;
input   xtile_V_vec_1_empty_n;
output   xtile_V_vec_1_read;
output  [0:0] x_address0;
output   x_ce0;
output   x_we0;
output  [31:0] x_d0;
output  [31:0] i2_load_out_out_din;
input   i2_load_out_out_full_n;
output   i2_load_out_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg i2_read;
reg xtile_V_vec_0_read;
reg xtile_V_vec_1_read;
reg x_ce0;
reg x_we0;
reg i2_load_out_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    i2_blk_n;
reg    xtile_V_vec_0_blk_n;
wire   [0:0] icmp_ln17_fu_99_p2;
reg    xtile_V_vec_1_blk_n;
reg    i2_load_out_out_blk_n;
wire    ap_CS_fsm_state3;
reg   [31:0] i2_read_reg_141;
wire    io_acc_block_signal_op10;
reg    ap_block_state1;
reg   [31:0] tmp_vec_0_reg_150;
reg   [31:0] tmp_vec_1_reg_155;
wire   [1:0] i_fu_119_p2;
wire    ap_CS_fsm_state2;
reg   [1:0] i3_0_i_i_reg_88;
wire   [0:0] icmp_ln19_fu_113_p2;
wire   [63:0] zext_ln20_fu_136_p1;
wire   [0:0] trunc_ln20_fu_125_p1;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((i2_load_out_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_113_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i3_0_i_i_reg_88 <= i_fu_119_p2;
    end else if ((~((ap_start == 1'b0) | (i2_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((icmp_ln17_fu_99_p2 == 1'd1) & (io_acc_block_signal_op10 == 1'b0))) & (icmp_ln17_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        i3_0_i_i_reg_88 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (i2_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((icmp_ln17_fu_99_p2 == 1'd1) & (io_acc_block_signal_op10 == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        i2_read_reg_141 <= i2_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (i2_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((icmp_ln17_fu_99_p2 == 1'd1) & (io_acc_block_signal_op10 == 1'b0))) & (icmp_ln17_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_vec_0_reg_150 <= xtile_V_vec_0_dout;
        tmp_vec_1_reg_155 <= xtile_V_vec_1_dout;
    end
end

always @ (*) begin
    if (((i2_load_out_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((i2_load_out_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i2_blk_n = i2_empty_n;
    end else begin
        i2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i2_load_out_out_blk_n = i2_load_out_out_full_n;
    end else begin
        i2_load_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((i2_load_out_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        i2_load_out_out_write = 1'b1;
    end else begin
        i2_load_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (i2_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((icmp_ln17_fu_99_p2 == 1'd1) & (io_acc_block_signal_op10 == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        i2_read = 1'b1;
    end else begin
        i2_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_113_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        x_we0 = 1'b1;
    end else begin
        x_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln17_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        xtile_V_vec_0_blk_n = xtile_V_vec_0_empty_n;
    end else begin
        xtile_V_vec_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (i2_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((icmp_ln17_fu_99_p2 == 1'd1) & (io_acc_block_signal_op10 == 1'b0))) & (icmp_ln17_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        xtile_V_vec_0_read = 1'b1;
    end else begin
        xtile_V_vec_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln17_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        xtile_V_vec_1_blk_n = xtile_V_vec_1_empty_n;
    end else begin
        xtile_V_vec_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (i2_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((icmp_ln17_fu_99_p2 == 1'd1) & (io_acc_block_signal_op10 == 1'b0))) & (icmp_ln17_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        xtile_V_vec_1_read = 1'b1;
    end else begin
        xtile_V_vec_1_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (i2_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((icmp_ln17_fu_99_p2 == 1'd1) & (io_acc_block_signal_op10 == 1'b0))) & (icmp_ln17_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((ap_start == 1'b0) | (i2_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((icmp_ln17_fu_99_p2 == 1'd1) & (io_acc_block_signal_op10 == 1'b0))) & (icmp_ln17_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln19_fu_113_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((i2_load_out_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (i2_empty_n == 1'b0) | (ap_done_reg == 1'b1) | ((icmp_ln17_fu_99_p2 == 1'd1) & (io_acc_block_signal_op10 == 1'b0)));
end

assign i2_load_out_out_din = i2_read_reg_141;

assign i_fu_119_p2 = (i3_0_i_i_reg_88 + 2'd1);

assign icmp_ln17_fu_99_p2 = ((i2_dout == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_113_p2 = ((i3_0_i_i_reg_88 == 2'd2) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op10 = (xtile_V_vec_1_empty_n & xtile_V_vec_0_empty_n);

assign trunc_ln20_fu_125_p1 = i3_0_i_i_reg_88[0:0];

assign x_address0 = zext_ln20_fu_136_p1;

assign x_d0 = ((trunc_ln20_fu_125_p1[0:0] === 1'b1) ? tmp_vec_1_reg_155 : tmp_vec_0_reg_150);

assign zext_ln20_fu_136_p1 = i3_0_i_i_reg_88;

endmodule //Block_tiled_matvec_s
