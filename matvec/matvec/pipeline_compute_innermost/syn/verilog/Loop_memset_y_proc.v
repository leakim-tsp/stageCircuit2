// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_memset_y_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        y_address0,
        y_ce0,
        y_we0,
        y_d0,
        y_q0,
        A_dout,
        A_empty_n,
        A_read,
        x_address0,
        x_ce0,
        x_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_pp0_stage0 = 5'd4;
parameter    ap_ST_fsm_pp0_stage1 = 5'd8;
parameter    ap_ST_fsm_state7 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [0:0] y_address0;
output   y_ce0;
output   y_we0;
output  [31:0] y_d0;
input  [31:0] y_q0;
input  [31:0] A_dout;
input   A_empty_n;
output   A_read;
output  [0:0] x_address0;
output   x_ce0;
input  [31:0] x_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] y_address0;
reg y_ce0;
reg y_we0;
reg[31:0] y_d0;
reg A_read;
reg x_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    A_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln26_reg_226;
reg   [2:0] indvar_flatten_reg_113;
reg   [1:0] i4_0_i_reg_124;
reg   [1:0] j5_0_i_reg_135;
wire   [0:0] xor_ln25_fu_151_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln26_fu_157_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln26_reg_226_pp0_iter1_reg;
wire   [2:0] add_ln26_fu_163_p2;
reg   [2:0] add_ln26_reg_230;
wire   [1:0] select_ln28_fu_175_p3;
reg   [1:0] select_ln28_reg_235;
wire   [1:0] select_ln28_1_fu_189_p3;
reg   [1:0] select_ln28_1_reg_240;
reg  signed [31:0] A_read_reg_251;
reg    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg  signed [31:0] x_load_reg_256;
wire   [1:0] j_fu_202_p2;
reg   [1:0] j_reg_261;
wire   [31:0] mul_ln28_fu_211_p2;
reg   [31:0] mul_ln28_reg_266;
reg   [0:0] y_addr_1_reg_271;
wire   [0:0] ap_phi_mux_phi_ln25_i_phi_fu_105_p4;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage1_subdone;
reg   [0:0] phi_ln25_i_reg_101;
reg    ap_block_state1;
reg   [2:0] ap_phi_mux_indvar_flatten_phi_fu_117_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_i4_0_i_phi_fu_128_p4;
reg   [1:0] ap_phi_mux_j5_0_i_phi_fu_139_p4;
wire   [63:0] zext_ln25_fu_146_p1;
wire   [63:0] zext_ln28_1_fu_197_p1;
wire   [63:0] zext_ln28_fu_207_p1;
wire   [31:0] add_ln28_fu_215_p2;
wire   [0:0] icmp_ln27_fu_169_p2;
wire   [1:0] add_ln26_1_fu_183_p2;
wire    ap_CS_fsm_state7;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_phi_ln25_i_phi_fu_105_p4 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_phi_ln25_i_phi_fu_105_p4 == 1'd1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_phi_ln25_i_phi_fu_105_p4 == 1'd1))) begin
        i4_0_i_reg_124 <= 2'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln26_reg_226 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i4_0_i_reg_124 <= select_ln28_1_reg_240;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_phi_ln25_i_phi_fu_105_p4 == 1'd1))) begin
        indvar_flatten_reg_113 <= 3'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln26_reg_226 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_113 <= add_ln26_reg_230;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_phi_ln25_i_phi_fu_105_p4 == 1'd1))) begin
        j5_0_i_reg_135 <= 2'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln26_reg_226 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j5_0_i_reg_135 <= j_reg_261;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_phi_ln25_i_phi_fu_105_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln25_i_reg_101 <= xor_ln25_fu_151_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln25_i_reg_101 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_226 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        A_read_reg_251 <= A_dout;
        x_load_reg_256 <= x_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln26_reg_230 <= add_ln26_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln26_reg_226 <= icmp_ln26_fu_157_p2;
        icmp_ln26_reg_226_pp0_iter1_reg <= icmp_ln26_reg_226;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_reg_226 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        j_reg_261 <= j_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln26_reg_226 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_ln28_reg_266 <= mul_ln28_fu_211_p2;
        y_addr_1_reg_271 <= zext_ln28_fu_207_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln26_fu_157_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln28_1_reg_240 <= select_ln28_1_fu_189_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln26_fu_157_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln28_reg_235 <= select_ln28_fu_175_p3;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_226 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        A_blk_n = A_empty_n;
    end else begin
        A_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_226 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        A_read = 1'b1;
    end else begin
        A_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln26_fu_157_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_226 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i4_0_i_phi_fu_128_p4 = select_ln28_1_reg_240;
    end else begin
        ap_phi_mux_i4_0_i_phi_fu_128_p4 = i4_0_i_reg_124;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_226 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_117_p4 = add_ln26_reg_230;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_117_p4 = indvar_flatten_reg_113;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_226 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j5_0_i_phi_fu_139_p4 = j_reg_261;
    end else begin
        ap_phi_mux_j5_0_i_phi_fu_139_p4 = j5_0_i_reg_135;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        y_address0 = y_addr_1_reg_271;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        y_address0 = zext_ln28_fu_207_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        y_address0 = zext_ln25_fu_146_p1;
    end else begin
        y_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        y_ce0 = 1'b1;
    end else begin
        y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        y_d0 = add_ln28_fu_215_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        y_d0 = 32'd0;
    end else begin
        y_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln26_reg_226_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        y_we0 = 1'b1;
    end else begin
        y_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_phi_ln25_i_phi_fu_105_p4 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln26_fu_157_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln26_fu_157_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_1_fu_183_p2 = (ap_phi_mux_i4_0_i_phi_fu_128_p4 + 2'd1);

assign add_ln26_fu_163_p2 = (ap_phi_mux_indvar_flatten_phi_fu_117_p4 + 3'd1);

assign add_ln28_fu_215_p2 = (y_q0 + mul_ln28_reg_266);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln26_reg_226 == 1'd0) & (1'b0 == A_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln26_reg_226 == 1'd0) & (1'b0 == A_empty_n) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage1_iter0 = ((icmp_ln26_reg_226 == 1'd0) & (1'b0 == A_empty_n));
end

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_phi_ln25_i_phi_fu_105_p4 = phi_ln25_i_reg_101;

assign icmp_ln26_fu_157_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_117_p4 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_169_p2 = ((ap_phi_mux_j5_0_i_phi_fu_139_p4 == 2'd2) ? 1'b1 : 1'b0);

assign j_fu_202_p2 = (select_ln28_reg_235 + 2'd1);

assign mul_ln28_fu_211_p2 = ($signed(A_read_reg_251) * $signed(x_load_reg_256));

assign select_ln28_1_fu_189_p3 = ((icmp_ln27_fu_169_p2[0:0] === 1'b1) ? add_ln26_1_fu_183_p2 : ap_phi_mux_i4_0_i_phi_fu_128_p4);

assign select_ln28_fu_175_p3 = ((icmp_ln27_fu_169_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_j5_0_i_phi_fu_139_p4);

assign x_address0 = zext_ln28_1_fu_197_p1;

assign xor_ln25_fu_151_p2 = (phi_ln25_i_reg_101 ^ 1'd1);

assign zext_ln25_fu_146_p1 = phi_ln25_i_reg_101;

assign zext_ln28_1_fu_197_p1 = select_ln28_fu_175_p3;

assign zext_ln28_fu_207_p1 = select_ln28_1_reg_240;

endmodule //Loop_memset_y_proc
