// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_memset_y_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        y_address0,
        y_ce0,
        y_we0,
        y_d0,
        y_q0,
        y_address1,
        y_ce1,
        y_we1,
        y_d1,
        A_address0,
        A_ce0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1,
        x_address0,
        x_ce0,
        x_q0,
        x_address1,
        x_ce1,
        x_q1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [0:0] y_address0;
output   y_ce0;
output   y_we0;
output  [31:0] y_d0;
input  [31:0] y_q0;
output  [0:0] y_address1;
output   y_ce1;
output   y_we1;
output  [31:0] y_d1;
output  [1:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [1:0] A_address1;
output   A_ce1;
input  [31:0] A_q1;
output  [0:0] x_address0;
output   x_ce0;
input  [31:0] x_q0;
output  [0:0] x_address1;
output   x_ce1;
input  [31:0] x_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] y_address0;
reg y_ce0;
reg y_we0;
reg y_ce1;
reg y_we1;
reg A_ce0;
reg A_ce1;
reg x_ce0;
reg x_ce1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] i4_0_i_reg_125;
wire   [0:0] xor_ln25_fu_141_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln26_fu_147_p2;
reg   [0:0] icmp_ln26_reg_220;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln26_reg_220_pp0_iter1_reg;
wire   [1:0] i_fu_153_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [0:0] y_addr_1_reg_239;
reg   [0:0] y_addr_1_reg_239_pp0_iter1_reg;
wire   [31:0] mul_ln28_fu_192_p2;
reg   [31:0] mul_ln28_reg_245;
wire   [31:0] mul_ln28_1_fu_198_p2;
reg   [31:0] mul_ln28_1_reg_250;
wire   [0:0] ap_phi_mux_phi_ln25_i_phi_fu_117_p4;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] phi_ln25_i_reg_113;
reg    ap_block_state1;
wire   [63:0] zext_ln25_fu_136_p1;
wire   [63:0] zext_ln28_1_fu_172_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] tmp_1_fu_183_p3;
wire   [63:0] zext_ln28_fu_159_p1;
wire   [2:0] tmp_fu_164_p3;
wire   [2:0] or_ln28_fu_177_p2;
wire  signed [31:0] mul_ln28_fu_192_p0;
wire  signed [31:0] mul_ln28_fu_192_p1;
wire  signed [31:0] mul_ln28_1_fu_198_p0;
wire  signed [31:0] mul_ln28_1_fu_198_p1;
wire   [31:0] add_ln28_fu_204_p2;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_phi_ln25_i_phi_fu_117_p4 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_phi_ln25_i_phi_fu_117_p4 == 1'd1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_phi_ln25_i_phi_fu_117_p4 == 1'd1))) begin
        i4_0_i_reg_125 <= 2'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln26_fu_147_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i4_0_i_reg_125 <= i_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_phi_ln25_i_phi_fu_117_p4 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln25_i_reg_113 <= xor_ln25_fu_141_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln25_i_reg_113 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln26_reg_220 <= icmp_ln26_fu_147_p2;
        icmp_ln26_reg_220_pp0_iter1_reg <= icmp_ln26_reg_220;
        y_addr_1_reg_239_pp0_iter1_reg <= y_addr_1_reg_239;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln26_reg_220 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_ln28_1_reg_250 <= mul_ln28_1_fu_198_p2;
        mul_ln28_reg_245 <= mul_ln28_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln26_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_addr_1_reg_239 <= zext_ln28_fu_159_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln26_fu_147_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_ce1 = 1'b1;
    end else begin
        x_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        y_address0 = y_addr_1_reg_239;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        y_address0 = zext_ln25_fu_136_p1;
    end else begin
        y_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        y_ce0 = 1'b1;
    end else begin
        y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        y_ce1 = 1'b1;
    end else begin
        y_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_we0 = 1'b1;
    end else begin
        y_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_reg_220_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        y_we1 = 1'b1;
    end else begin
        y_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (ap_phi_mux_phi_ln25_i_phi_fu_117_p4 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln26_fu_147_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln26_fu_147_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = zext_ln28_1_fu_172_p1;

assign A_address1 = tmp_1_fu_183_p3;

assign add_ln28_fu_204_p2 = (mul_ln28_1_reg_250 + mul_ln28_reg_245);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_phi_ln25_i_phi_fu_117_p4 = phi_ln25_i_reg_113;

assign i_fu_153_p2 = (i4_0_i_reg_125 + 2'd1);

assign icmp_ln26_fu_147_p2 = ((i4_0_i_reg_125 == 2'd2) ? 1'b1 : 1'b0);

assign mul_ln28_1_fu_198_p0 = x_q1;

assign mul_ln28_1_fu_198_p1 = A_q1;

assign mul_ln28_1_fu_198_p2 = ($signed(mul_ln28_1_fu_198_p0) * $signed(mul_ln28_1_fu_198_p1));

assign mul_ln28_fu_192_p0 = x_q0;

assign mul_ln28_fu_192_p1 = A_q0;

assign mul_ln28_fu_192_p2 = ($signed(mul_ln28_fu_192_p0) * $signed(mul_ln28_fu_192_p1));

assign or_ln28_fu_177_p2 = (tmp_fu_164_p3 | 3'd1);

assign tmp_1_fu_183_p3 = {{61'd0}, {or_ln28_fu_177_p2}};

assign tmp_fu_164_p3 = {{i4_0_i_reg_125}, {1'd0}};

assign x_address0 = 1'd0;

assign x_address1 = 1'd1;

assign xor_ln25_fu_141_p2 = (phi_ln25_i_reg_113 ^ 1'd1);

assign y_address1 = y_addr_1_reg_239_pp0_iter1_reg;

assign y_d0 = 32'd0;

assign y_d1 = (y_q0 + add_ln28_fu_204_p2);

assign zext_ln25_fu_136_p1 = phi_ln25_i_reg_113;

assign zext_ln28_1_fu_172_p1 = tmp_fu_164_p3;

assign zext_ln28_fu_159_p1 = i4_0_i_reg_125;

endmodule //Loop_memset_y_proc
