-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_1_proc10 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Atile_V_vec_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Atile_V_vec_0_empty_n : IN STD_LOGIC;
    Atile_V_vec_0_read : OUT STD_LOGIC;
    Atile_V_vec_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    Atile_V_vec_1_empty_n : IN STD_LOGIC;
    Atile_V_vec_1_read : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_we0 : OUT STD_LOGIC;
    A_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Loop_1_proc10 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Atile_V_vec_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln8_fu_91_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Atile_V_vec_1_blk_n : STD_LOGIC;
    signal io_acc_block_signal_op13 : STD_LOGIC;
    signal ap_block_state2 : BOOLEAN;
    signal i_fu_97_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_164 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_vec_0_reg_169 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_vec_1_reg_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln11_fu_119_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln11_reg_179 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_fu_129_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_0_i_i_i_reg_69 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_0_i_i_i_reg_80 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln10_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln11_2_fu_155_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_111_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln11_fu_135_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln11_1_fu_146_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln11_fu_150_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((icmp_ln8_fu_91_p2 = ap_const_lv1_0) and (io_acc_block_signal_op13 = ap_const_logic_0))) and (icmp_ln8_fu_91_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_i_i_reg_69_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_i_i_i_reg_69 <= i_reg_164;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_i_i_reg_69 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_0_i_i_i_reg_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_123_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_0_i_i_i_reg_80 <= j_fu_129_p2;
            elsif ((not(((icmp_ln8_fu_91_p2 = ap_const_lv1_0) and (io_acc_block_signal_op13 = ap_const_logic_0))) and (icmp_ln8_fu_91_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_i_i_i_reg_80 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln8_fu_91_p2 = ap_const_lv1_0) and (io_acc_block_signal_op13 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_164 <= i_fu_97_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln8_fu_91_p2 = ap_const_lv1_0) and (io_acc_block_signal_op13 = ap_const_logic_0))) and (icmp_ln8_fu_91_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_vec_0_reg_169 <= Atile_V_vec_0_dout;
                tmp_vec_1_reg_174 <= Atile_V_vec_1_dout;
                    zext_ln11_reg_179(2 downto 1) <= zext_ln11_fu_119_p1(2 downto 1);
            end if;
        end if;
    end process;
    zext_ln11_reg_179(0) <= '0';
    zext_ln11_reg_179(3) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_91_p2, io_acc_block_signal_op13, ap_CS_fsm_state3, icmp_ln10_fu_123_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln8_fu_91_p2 = ap_const_lv1_0) and (io_acc_block_signal_op13 = ap_const_logic_0))) and (icmp_ln8_fu_91_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((icmp_ln8_fu_91_p2 = ap_const_lv1_0) and (io_acc_block_signal_op13 = ap_const_logic_0))) and (icmp_ln8_fu_91_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln10_fu_123_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    A_address0 <= zext_ln11_2_fu_155_p1(2 - 1 downto 0);

    A_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_d0 <= 
        tmp_vec_1_reg_174 when (trunc_ln11_fu_135_p1(0) = '1') else 
        tmp_vec_0_reg_169;

    A_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln10_fu_123_p2)
    begin
        if (((icmp_ln10_fu_123_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            A_we0 <= ap_const_logic_1;
        else 
            A_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Atile_V_vec_0_blk_n_assign_proc : process(Atile_V_vec_0_empty_n, ap_CS_fsm_state2, icmp_ln8_fu_91_p2)
    begin
        if (((icmp_ln8_fu_91_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Atile_V_vec_0_blk_n <= Atile_V_vec_0_empty_n;
        else 
            Atile_V_vec_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Atile_V_vec_0_read_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_91_p2, io_acc_block_signal_op13)
    begin
        if ((not(((icmp_ln8_fu_91_p2 = ap_const_lv1_0) and (io_acc_block_signal_op13 = ap_const_logic_0))) and (icmp_ln8_fu_91_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Atile_V_vec_0_read <= ap_const_logic_1;
        else 
            Atile_V_vec_0_read <= ap_const_logic_0;
        end if; 
    end process;


    Atile_V_vec_1_blk_n_assign_proc : process(Atile_V_vec_1_empty_n, ap_CS_fsm_state2, icmp_ln8_fu_91_p2)
    begin
        if (((icmp_ln8_fu_91_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Atile_V_vec_1_blk_n <= Atile_V_vec_1_empty_n;
        else 
            Atile_V_vec_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Atile_V_vec_1_read_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_91_p2, io_acc_block_signal_op13)
    begin
        if ((not(((icmp_ln8_fu_91_p2 = ap_const_lv1_0) and (io_acc_block_signal_op13 = ap_const_logic_0))) and (icmp_ln8_fu_91_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Atile_V_vec_1_read <= ap_const_logic_1;
        else 
            Atile_V_vec_1_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln11_fu_150_p2 <= std_logic_vector(unsigned(zext_ln11_reg_179) + unsigned(zext_ln11_1_fu_146_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(icmp_ln8_fu_91_p2, io_acc_block_signal_op13)
    begin
                ap_block_state2 <= ((icmp_ln8_fu_91_p2 = ap_const_lv1_0) and (io_acc_block_signal_op13 = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln8_fu_91_p2, io_acc_block_signal_op13)
    begin
        if ((not(((icmp_ln8_fu_91_p2 = ap_const_lv1_0) and (io_acc_block_signal_op13 = ap_const_logic_0))) and (icmp_ln8_fu_91_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_91_p2, io_acc_block_signal_op13)
    begin
        if ((not(((icmp_ln8_fu_91_p2 = ap_const_lv1_0) and (io_acc_block_signal_op13 = ap_const_logic_0))) and (icmp_ln8_fu_91_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_97_p2 <= std_logic_vector(unsigned(i_0_i_i_i_reg_69) + unsigned(ap_const_lv2_1));
    icmp_ln10_fu_123_p2 <= "1" when (j_0_i_i_i_reg_80 = ap_const_lv2_2) else "0";
    icmp_ln8_fu_91_p2 <= "1" when (i_0_i_i_i_reg_69 = ap_const_lv2_2) else "0";
    io_acc_block_signal_op13 <= (Atile_V_vec_1_empty_n and Atile_V_vec_0_empty_n);
    j_fu_129_p2 <= std_logic_vector(unsigned(j_0_i_i_i_reg_80) + unsigned(ap_const_lv2_1));
    tmp_fu_111_p3 <= (i_0_i_i_i_reg_69 & ap_const_lv1_0);
    trunc_ln11_fu_135_p1 <= j_0_i_i_i_reg_80(1 - 1 downto 0);
    zext_ln11_1_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_i_i_reg_80),4));
    zext_ln11_2_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_fu_150_p2),64));
    zext_ln11_fu_119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_111_p3),4));
end behav;
