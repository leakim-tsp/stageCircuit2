// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Block_tiled_matvec_s.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Block_tiled_matvec_s::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Block_tiled_matvec_s::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> Block_tiled_matvec_s::ap_ST_fsm_state1 = "1";
const sc_lv<3> Block_tiled_matvec_s::ap_ST_fsm_state2 = "10";
const sc_lv<3> Block_tiled_matvec_s::ap_ST_fsm_state3 = "100";
const sc_lv<32> Block_tiled_matvec_s::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> Block_tiled_matvec_s::ap_const_lv1_1 = "1";
const sc_lv<32> Block_tiled_matvec_s::ap_const_lv32_2 = "10";
const sc_lv<32> Block_tiled_matvec_s::ap_const_lv32_1 = "1";
const sc_lv<2> Block_tiled_matvec_s::ap_const_lv2_0 = "00";
const sc_lv<1> Block_tiled_matvec_s::ap_const_lv1_0 = "0";
const sc_lv<2> Block_tiled_matvec_s::ap_const_lv2_2 = "10";
const sc_lv<2> Block_tiled_matvec_s::ap_const_lv2_1 = "1";
const bool Block_tiled_matvec_s::ap_const_boolean_1 = true;

Block_tiled_matvec_s::Block_tiled_matvec_s(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( i2_empty_n );
    sensitive << ( icmp_ln17_fu_99_p2 );
    sensitive << ( io_acc_block_signal_op10 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( i2_load_out_out_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( i2_load_out_out_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_i2_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( i2_empty_n );

    SC_METHOD(thread_i2_load_out_out_blk_n);
    sensitive << ( i2_load_out_out_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_i2_load_out_out_din);
    sensitive << ( i2_load_out_out_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i2_read_reg_141 );

    SC_METHOD(thread_i2_load_out_out_write);
    sensitive << ( i2_load_out_out_full_n );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_i2_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( i2_empty_n );
    sensitive << ( icmp_ln17_fu_99_p2 );
    sensitive << ( io_acc_block_signal_op10 );

    SC_METHOD(thread_i_fu_119_p2);
    sensitive << ( i3_0_i_i_reg_88 );

    SC_METHOD(thread_icmp_ln17_fu_99_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( i2_dout );
    sensitive << ( i2_empty_n );
    sensitive << ( icmp_ln17_fu_99_p2 );
    sensitive << ( io_acc_block_signal_op10 );

    SC_METHOD(thread_icmp_ln19_fu_113_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i3_0_i_i_reg_88 );

    SC_METHOD(thread_io_acc_block_signal_op10);
    sensitive << ( xtile_V_vec_0_empty_n );
    sensitive << ( xtile_V_vec_1_empty_n );

    SC_METHOD(thread_trunc_ln20_fu_125_p1);
    sensitive << ( i3_0_i_i_reg_88 );

    SC_METHOD(thread_x_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln20_fu_136_p1 );

    SC_METHOD(thread_x_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_x_d0);
    sensitive << ( tmp_vec_0_reg_150 );
    sensitive << ( tmp_vec_1_reg_155 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( trunc_ln20_fu_125_p1 );

    SC_METHOD(thread_x_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln19_fu_113_p2 );

    SC_METHOD(thread_xtile_V_vec_0_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xtile_V_vec_0_empty_n );
    sensitive << ( icmp_ln17_fu_99_p2 );

    SC_METHOD(thread_xtile_V_vec_0_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( i2_empty_n );
    sensitive << ( icmp_ln17_fu_99_p2 );
    sensitive << ( io_acc_block_signal_op10 );

    SC_METHOD(thread_xtile_V_vec_1_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( xtile_V_vec_1_empty_n );
    sensitive << ( icmp_ln17_fu_99_p2 );

    SC_METHOD(thread_xtile_V_vec_1_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( i2_empty_n );
    sensitive << ( icmp_ln17_fu_99_p2 );
    sensitive << ( io_acc_block_signal_op10 );

    SC_METHOD(thread_zext_ln20_fu_136_p1);
    sensitive << ( i3_0_i_i_reg_88 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( i2_empty_n );
    sensitive << ( i2_load_out_out_full_n );
    sensitive << ( icmp_ln17_fu_99_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( io_acc_block_signal_op10 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln19_fu_113_p2 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Block_tiled_matvec_s_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, i2_dout, "(port)i2_dout");
    sc_trace(mVcdFile, i2_empty_n, "(port)i2_empty_n");
    sc_trace(mVcdFile, i2_read, "(port)i2_read");
    sc_trace(mVcdFile, xtile_V_vec_0_dout, "(port)xtile_V_vec_0_dout");
    sc_trace(mVcdFile, xtile_V_vec_0_empty_n, "(port)xtile_V_vec_0_empty_n");
    sc_trace(mVcdFile, xtile_V_vec_0_read, "(port)xtile_V_vec_0_read");
    sc_trace(mVcdFile, xtile_V_vec_1_dout, "(port)xtile_V_vec_1_dout");
    sc_trace(mVcdFile, xtile_V_vec_1_empty_n, "(port)xtile_V_vec_1_empty_n");
    sc_trace(mVcdFile, xtile_V_vec_1_read, "(port)xtile_V_vec_1_read");
    sc_trace(mVcdFile, x_address0, "(port)x_address0");
    sc_trace(mVcdFile, x_ce0, "(port)x_ce0");
    sc_trace(mVcdFile, x_we0, "(port)x_we0");
    sc_trace(mVcdFile, x_d0, "(port)x_d0");
    sc_trace(mVcdFile, i2_load_out_out_din, "(port)i2_load_out_out_din");
    sc_trace(mVcdFile, i2_load_out_out_full_n, "(port)i2_load_out_out_full_n");
    sc_trace(mVcdFile, i2_load_out_out_write, "(port)i2_load_out_out_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i2_blk_n, "i2_blk_n");
    sc_trace(mVcdFile, xtile_V_vec_0_blk_n, "xtile_V_vec_0_blk_n");
    sc_trace(mVcdFile, icmp_ln17_fu_99_p2, "icmp_ln17_fu_99_p2");
    sc_trace(mVcdFile, xtile_V_vec_1_blk_n, "xtile_V_vec_1_blk_n");
    sc_trace(mVcdFile, i2_load_out_out_blk_n, "i2_load_out_out_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i2_read_reg_141, "i2_read_reg_141");
    sc_trace(mVcdFile, io_acc_block_signal_op10, "io_acc_block_signal_op10");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_vec_0_reg_150, "tmp_vec_0_reg_150");
    sc_trace(mVcdFile, tmp_vec_1_reg_155, "tmp_vec_1_reg_155");
    sc_trace(mVcdFile, i_fu_119_p2, "i_fu_119_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i3_0_i_i_reg_88, "i3_0_i_i_reg_88");
    sc_trace(mVcdFile, icmp_ln19_fu_113_p2, "icmp_ln19_fu_113_p2");
    sc_trace(mVcdFile, zext_ln20_fu_136_p1, "zext_ln20_fu_136_p1");
    sc_trace(mVcdFile, trunc_ln20_fu_125_p1, "trunc_ln20_fu_125_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Block_tiled_matvec_s::~Block_tiled_matvec_s() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Block_tiled_matvec_s::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                    esl_seteq<1,1,1>(i2_load_out_out_full_n.read(), ap_const_logic_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln19_fu_113_p2.read(), ap_const_lv1_0))) {
        i3_0_i_i_reg_88 = i_fu_119_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(icmp_ln17_fu_99_p2.read(), ap_const_lv1_1) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, i2_empty_n.read()) || (esl_seteq<1,1,1>(icmp_ln17_fu_99_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op10.read()))))) {
        i3_0_i_i_reg_88 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, i2_empty_n.read()) || (esl_seteq<1,1,1>(icmp_ln17_fu_99_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op10.read()))))) {
        i2_read_reg_141 = i2_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(icmp_ln17_fu_99_p2.read(), ap_const_lv1_1) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, i2_empty_n.read()) || (esl_seteq<1,1,1>(icmp_ln17_fu_99_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op10.read()))))) {
        tmp_vec_0_reg_150 = xtile_V_vec_0_dout.read();
        tmp_vec_1_reg_155 = xtile_V_vec_1_dout.read();
    }
}

void Block_tiled_matvec_s::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Block_tiled_matvec_s::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Block_tiled_matvec_s::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Block_tiled_matvec_s::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, i2_empty_n.read()) || (esl_seteq<1,1,1>(icmp_ln17_fu_99_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op10.read())));
}

void Block_tiled_matvec_s::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(i2_load_out_out_full_n.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Block_tiled_matvec_s::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Block_tiled_matvec_s::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(i2_load_out_out_full_n.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Block_tiled_matvec_s::thread_i2_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        i2_blk_n = i2_empty_n.read();
    } else {
        i2_blk_n = ap_const_logic_1;
    }
}

void Block_tiled_matvec_s::thread_i2_load_out_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i2_load_out_out_blk_n = i2_load_out_out_full_n.read();
    } else {
        i2_load_out_out_blk_n = ap_const_logic_1;
    }
}

void Block_tiled_matvec_s::thread_i2_load_out_out_din() {
    i2_load_out_out_din = i2_read_reg_141.read();
}

void Block_tiled_matvec_s::thread_i2_load_out_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(i2_load_out_out_full_n.read(), ap_const_logic_1))) {
        i2_load_out_out_write = ap_const_logic_1;
    } else {
        i2_load_out_out_write = ap_const_logic_0;
    }
}

void Block_tiled_matvec_s::thread_i2_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, i2_empty_n.read()) || (esl_seteq<1,1,1>(icmp_ln17_fu_99_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op10.read()))))) {
        i2_read = ap_const_logic_1;
    } else {
        i2_read = ap_const_logic_0;
    }
}

void Block_tiled_matvec_s::thread_i_fu_119_p2() {
    i_fu_119_p2 = (!i3_0_i_i_reg_88.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i3_0_i_i_reg_88.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void Block_tiled_matvec_s::thread_icmp_ln17_fu_99_p2() {
    icmp_ln17_fu_99_p2 = (!i2_dout.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(i2_dout.read() == ap_const_lv32_0);
}

void Block_tiled_matvec_s::thread_icmp_ln19_fu_113_p2() {
    icmp_ln19_fu_113_p2 = (!i3_0_i_i_reg_88.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(i3_0_i_i_reg_88.read() == ap_const_lv2_2);
}

void Block_tiled_matvec_s::thread_io_acc_block_signal_op10() {
    io_acc_block_signal_op10 = (xtile_V_vec_0_empty_n.read() & xtile_V_vec_1_empty_n.read());
}

void Block_tiled_matvec_s::thread_trunc_ln20_fu_125_p1() {
    trunc_ln20_fu_125_p1 = i3_0_i_i_reg_88.read().range(1-1, 0);
}

void Block_tiled_matvec_s::thread_x_address0() {
    x_address0 =  (sc_lv<1>) (zext_ln20_fu_136_p1.read());
}

void Block_tiled_matvec_s::thread_x_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        x_ce0 = ap_const_logic_1;
    } else {
        x_ce0 = ap_const_logic_0;
    }
}

void Block_tiled_matvec_s::thread_x_d0() {
    x_d0 = (!trunc_ln20_fu_125_p1.read()[0].is_01())? sc_lv<32>(): ((trunc_ln20_fu_125_p1.read()[0].to_bool())? tmp_vec_1_reg_155.read(): tmp_vec_0_reg_150.read());
}

void Block_tiled_matvec_s::thread_x_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln19_fu_113_p2.read(), ap_const_lv1_0))) {
        x_we0 = ap_const_logic_1;
    } else {
        x_we0 = ap_const_logic_0;
    }
}

void Block_tiled_matvec_s::thread_xtile_V_vec_0_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(icmp_ln17_fu_99_p2.read(), ap_const_lv1_1))) {
        xtile_V_vec_0_blk_n = xtile_V_vec_0_empty_n.read();
    } else {
        xtile_V_vec_0_blk_n = ap_const_logic_1;
    }
}

void Block_tiled_matvec_s::thread_xtile_V_vec_0_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(icmp_ln17_fu_99_p2.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, i2_empty_n.read()) || (esl_seteq<1,1,1>(icmp_ln17_fu_99_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op10.read()))))) {
        xtile_V_vec_0_read = ap_const_logic_1;
    } else {
        xtile_V_vec_0_read = ap_const_logic_0;
    }
}

void Block_tiled_matvec_s::thread_xtile_V_vec_1_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(icmp_ln17_fu_99_p2.read(), ap_const_lv1_1))) {
        xtile_V_vec_1_blk_n = xtile_V_vec_1_empty_n.read();
    } else {
        xtile_V_vec_1_blk_n = ap_const_logic_1;
    }
}

void Block_tiled_matvec_s::thread_xtile_V_vec_1_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(icmp_ln17_fu_99_p2.read(), ap_const_lv1_1) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, i2_empty_n.read()) || (esl_seteq<1,1,1>(icmp_ln17_fu_99_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op10.read()))))) {
        xtile_V_vec_1_read = ap_const_logic_1;
    } else {
        xtile_V_vec_1_read = ap_const_logic_0;
    }
}

void Block_tiled_matvec_s::thread_zext_ln20_fu_136_p1() {
    zext_ln20_fu_136_p1 = esl_zext<64,2>(i3_0_i_i_reg_88.read());
}

void Block_tiled_matvec_s::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(icmp_ln17_fu_99_p2.read(), ap_const_lv1_1) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, i2_empty_n.read()) || (esl_seteq<1,1,1>(icmp_ln17_fu_99_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op10.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, i2_empty_n.read()) || (esl_seteq<1,1,1>(icmp_ln17_fu_99_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op10.read()))) && esl_seteq<1,1,1>(icmp_ln17_fu_99_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln19_fu_113_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(i2_load_out_out_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

