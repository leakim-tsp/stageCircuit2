// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Loop_1_proc10.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Loop_1_proc10::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Loop_1_proc10::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> Loop_1_proc10::ap_ST_fsm_state1 = "1";
const sc_lv<4> Loop_1_proc10::ap_ST_fsm_state2 = "10";
const sc_lv<4> Loop_1_proc10::ap_ST_fsm_state3 = "100";
const sc_lv<4> Loop_1_proc10::ap_ST_fsm_state4 = "1000";
const sc_lv<32> Loop_1_proc10::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Loop_1_proc10::ap_const_lv32_1 = "1";
const sc_lv<1> Loop_1_proc10::ap_const_lv1_0 = "0";
const sc_lv<32> Loop_1_proc10::ap_const_lv32_2 = "10";
const sc_lv<2> Loop_1_proc10::ap_const_lv2_0 = "00";
const sc_lv<32> Loop_1_proc10::ap_const_lv32_3 = "11";
const sc_lv<2> Loop_1_proc10::ap_const_lv2_2 = "10";
const sc_lv<2> Loop_1_proc10::ap_const_lv2_1 = "1";
const sc_lv<1> Loop_1_proc10::ap_const_lv1_1 = "1";
const bool Loop_1_proc10::ap_const_boolean_1 = true;

Loop_1_proc10::Loop_1_proc10(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln11_2_fu_155_p1 );

    SC_METHOD(thread_A_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_A_d0);
    sensitive << ( tmp_vec_0_reg_169 );
    sensitive << ( tmp_vec_1_reg_174 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( trunc_ln11_fu_135_p1 );

    SC_METHOD(thread_A_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln10_fu_123_p2 );

    SC_METHOD(thread_Atile_V_vec_0_blk_n);
    sensitive << ( Atile_V_vec_0_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_91_p2 );

    SC_METHOD(thread_Atile_V_vec_0_read);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_91_p2 );
    sensitive << ( io_acc_block_signal_op13 );

    SC_METHOD(thread_Atile_V_vec_1_blk_n);
    sensitive << ( Atile_V_vec_1_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_91_p2 );

    SC_METHOD(thread_Atile_V_vec_1_read);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_91_p2 );
    sensitive << ( io_acc_block_signal_op13 );

    SC_METHOD(thread_add_ln11_fu_150_p2);
    sensitive << ( zext_ln11_reg_179 );
    sensitive << ( zext_ln11_1_fu_146_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( icmp_ln8_fu_91_p2 );
    sensitive << ( io_acc_block_signal_op13 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_91_p2 );
    sensitive << ( io_acc_block_signal_op13 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_91_p2 );
    sensitive << ( io_acc_block_signal_op13 );

    SC_METHOD(thread_i_fu_97_p2);
    sensitive << ( i_0_i_i_i_reg_69 );

    SC_METHOD(thread_icmp_ln10_fu_123_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_i_i_i_reg_80 );

    SC_METHOD(thread_icmp_ln8_fu_91_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_91_p2 );
    sensitive << ( io_acc_block_signal_op13 );
    sensitive << ( i_0_i_i_i_reg_69 );

    SC_METHOD(thread_io_acc_block_signal_op13);
    sensitive << ( Atile_V_vec_0_empty_n );
    sensitive << ( Atile_V_vec_1_empty_n );

    SC_METHOD(thread_j_fu_129_p2);
    sensitive << ( j_0_i_i_i_reg_80 );

    SC_METHOD(thread_tmp_fu_111_p3);
    sensitive << ( i_0_i_i_i_reg_69 );

    SC_METHOD(thread_trunc_ln11_fu_135_p1);
    sensitive << ( j_0_i_i_i_reg_80 );

    SC_METHOD(thread_zext_ln11_1_fu_146_p1);
    sensitive << ( j_0_i_i_i_reg_80 );

    SC_METHOD(thread_zext_ln11_2_fu_155_p1);
    sensitive << ( add_ln11_fu_150_p2 );

    SC_METHOD(thread_zext_ln11_fu_119_p1);
    sensitive << ( tmp_fu_111_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_91_p2 );
    sensitive << ( io_acc_block_signal_op13 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln10_fu_123_p2 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Loop_1_proc10_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, Atile_V_vec_0_dout, "(port)Atile_V_vec_0_dout");
    sc_trace(mVcdFile, Atile_V_vec_0_empty_n, "(port)Atile_V_vec_0_empty_n");
    sc_trace(mVcdFile, Atile_V_vec_0_read, "(port)Atile_V_vec_0_read");
    sc_trace(mVcdFile, Atile_V_vec_1_dout, "(port)Atile_V_vec_1_dout");
    sc_trace(mVcdFile, Atile_V_vec_1_empty_n, "(port)Atile_V_vec_1_empty_n");
    sc_trace(mVcdFile, Atile_V_vec_1_read, "(port)Atile_V_vec_1_read");
    sc_trace(mVcdFile, A_address0, "(port)A_address0");
    sc_trace(mVcdFile, A_ce0, "(port)A_ce0");
    sc_trace(mVcdFile, A_we0, "(port)A_we0");
    sc_trace(mVcdFile, A_d0, "(port)A_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, Atile_V_vec_0_blk_n, "Atile_V_vec_0_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln8_fu_91_p2, "icmp_ln8_fu_91_p2");
    sc_trace(mVcdFile, Atile_V_vec_1_blk_n, "Atile_V_vec_1_blk_n");
    sc_trace(mVcdFile, io_acc_block_signal_op13, "io_acc_block_signal_op13");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, i_fu_97_p2, "i_fu_97_p2");
    sc_trace(mVcdFile, i_reg_164, "i_reg_164");
    sc_trace(mVcdFile, tmp_vec_0_reg_169, "tmp_vec_0_reg_169");
    sc_trace(mVcdFile, tmp_vec_1_reg_174, "tmp_vec_1_reg_174");
    sc_trace(mVcdFile, zext_ln11_fu_119_p1, "zext_ln11_fu_119_p1");
    sc_trace(mVcdFile, zext_ln11_reg_179, "zext_ln11_reg_179");
    sc_trace(mVcdFile, j_fu_129_p2, "j_fu_129_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_0_i_i_i_reg_69, "i_0_i_i_i_reg_69");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, j_0_i_i_i_reg_80, "j_0_i_i_i_reg_80");
    sc_trace(mVcdFile, icmp_ln10_fu_123_p2, "icmp_ln10_fu_123_p2");
    sc_trace(mVcdFile, zext_ln11_2_fu_155_p1, "zext_ln11_2_fu_155_p1");
    sc_trace(mVcdFile, tmp_fu_111_p3, "tmp_fu_111_p3");
    sc_trace(mVcdFile, trunc_ln11_fu_135_p1, "trunc_ln11_fu_135_p1");
    sc_trace(mVcdFile, zext_ln11_1_fu_146_p1, "zext_ln11_1_fu_146_p1");
    sc_trace(mVcdFile, add_ln11_fu_150_p2, "add_ln11_fu_150_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Loop_1_proc10::~Loop_1_proc10() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Loop_1_proc10::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    !(esl_seteq<1,1,1>(icmp_ln8_fu_91_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op13.read())) && 
                    esl_seteq<1,1,1>(icmp_ln8_fu_91_p2.read(), ap_const_lv1_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_0_i_i_i_reg_69 = i_reg_164.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        i_0_i_i_i_reg_69 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_fu_123_p2.read()))) {
        j_0_i_i_i_reg_80 = j_fu_129_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln8_fu_91_p2.read(), ap_const_lv1_0) && 
                !(esl_seteq<1,1,1>(icmp_ln8_fu_91_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op13.read())))) {
        j_0_i_i_i_reg_80 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(icmp_ln8_fu_91_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op13.read())))) {
        i_reg_164 = i_fu_97_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln8_fu_91_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln8_fu_91_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op13.read())))) {
        tmp_vec_0_reg_169 = Atile_V_vec_0_dout.read();
        tmp_vec_1_reg_174 = Atile_V_vec_1_dout.read();
        zext_ln11_reg_179 = zext_ln11_fu_119_p1.read();
    }
}

void Loop_1_proc10::thread_A_address0() {
    A_address0 =  (sc_lv<2>) (zext_ln11_2_fu_155_p1.read());
}

void Loop_1_proc10::thread_A_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        A_ce0 = ap_const_logic_1;
    } else {
        A_ce0 = ap_const_logic_0;
    }
}

void Loop_1_proc10::thread_A_d0() {
    A_d0 = (!trunc_ln11_fu_135_p1.read()[0].is_01())? sc_lv<32>(): ((trunc_ln11_fu_135_p1.read()[0].to_bool())? tmp_vec_1_reg_174.read(): tmp_vec_0_reg_169.read());
}

void Loop_1_proc10::thread_A_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_fu_123_p2.read()))) {
        A_we0 = ap_const_logic_1;
    } else {
        A_we0 = ap_const_logic_0;
    }
}

void Loop_1_proc10::thread_Atile_V_vec_0_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_fu_91_p2.read(), ap_const_lv1_0))) {
        Atile_V_vec_0_blk_n = Atile_V_vec_0_empty_n.read();
    } else {
        Atile_V_vec_0_blk_n = ap_const_logic_1;
    }
}

void Loop_1_proc10::thread_Atile_V_vec_0_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_fu_91_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln8_fu_91_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op13.read())))) {
        Atile_V_vec_0_read = ap_const_logic_1;
    } else {
        Atile_V_vec_0_read = ap_const_logic_0;
    }
}

void Loop_1_proc10::thread_Atile_V_vec_1_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_fu_91_p2.read(), ap_const_lv1_0))) {
        Atile_V_vec_1_blk_n = Atile_V_vec_1_empty_n.read();
    } else {
        Atile_V_vec_1_blk_n = ap_const_logic_1;
    }
}

void Loop_1_proc10::thread_Atile_V_vec_1_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_fu_91_p2.read(), ap_const_lv1_0) && 
         !(esl_seteq<1,1,1>(icmp_ln8_fu_91_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op13.read())))) {
        Atile_V_vec_1_read = ap_const_logic_1;
    } else {
        Atile_V_vec_1_read = ap_const_logic_0;
    }
}

void Loop_1_proc10::thread_add_ln11_fu_150_p2() {
    add_ln11_fu_150_p2 = (!zext_ln11_reg_179.read().is_01() || !zext_ln11_1_fu_146_p1.read().is_01())? sc_lv<4>(): (sc_biguint<4>(zext_ln11_reg_179.read()) + sc_biguint<4>(zext_ln11_1_fu_146_p1.read()));
}

void Loop_1_proc10::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Loop_1_proc10::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Loop_1_proc10::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Loop_1_proc10::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Loop_1_proc10::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Loop_1_proc10::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(icmp_ln8_fu_91_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op13.read()));
}

void Loop_1_proc10::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(icmp_ln8_fu_91_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op13.read())) && 
         esl_seteq<1,1,1>(icmp_ln8_fu_91_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Loop_1_proc10::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Loop_1_proc10::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(icmp_ln8_fu_91_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op13.read())) && 
         esl_seteq<1,1,1>(icmp_ln8_fu_91_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Loop_1_proc10::thread_i_fu_97_p2() {
    i_fu_97_p2 = (!i_0_i_i_i_reg_69.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i_0_i_i_i_reg_69.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void Loop_1_proc10::thread_icmp_ln10_fu_123_p2() {
    icmp_ln10_fu_123_p2 = (!j_0_i_i_i_reg_80.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(j_0_i_i_i_reg_80.read() == ap_const_lv2_2);
}

void Loop_1_proc10::thread_icmp_ln8_fu_91_p2() {
    icmp_ln8_fu_91_p2 = (!i_0_i_i_i_reg_69.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_i_i_reg_69.read() == ap_const_lv2_2);
}

void Loop_1_proc10::thread_io_acc_block_signal_op13() {
    io_acc_block_signal_op13 = (Atile_V_vec_0_empty_n.read() & Atile_V_vec_1_empty_n.read());
}

void Loop_1_proc10::thread_j_fu_129_p2() {
    j_fu_129_p2 = (!j_0_i_i_i_reg_80.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(j_0_i_i_i_reg_80.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void Loop_1_proc10::thread_tmp_fu_111_p3() {
    tmp_fu_111_p3 = esl_concat<2,1>(i_0_i_i_i_reg_69.read(), ap_const_lv1_0);
}

void Loop_1_proc10::thread_trunc_ln11_fu_135_p1() {
    trunc_ln11_fu_135_p1 = j_0_i_i_i_reg_80.read().range(1-1, 0);
}

void Loop_1_proc10::thread_zext_ln11_1_fu_146_p1() {
    zext_ln11_1_fu_146_p1 = esl_zext<4,2>(j_0_i_i_i_reg_80.read());
}

void Loop_1_proc10::thread_zext_ln11_2_fu_155_p1() {
    zext_ln11_2_fu_155_p1 = esl_zext<64,4>(add_ln11_fu_150_p2.read());
}

void Loop_1_proc10::thread_zext_ln11_fu_119_p1() {
    zext_ln11_fu_119_p1 = esl_zext<4,3>(tmp_fu_111_p3.read());
}

void Loop_1_proc10::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(icmp_ln8_fu_91_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op13.read())) && esl_seteq<1,1,1>(icmp_ln8_fu_91_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln8_fu_91_p2.read(), ap_const_lv1_0) && !(esl_seteq<1,1,1>(icmp_ln8_fu_91_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op13.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln10_fu_123_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

