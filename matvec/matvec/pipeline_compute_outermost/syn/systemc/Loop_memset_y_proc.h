// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Loop_memset_y_proc_HH_
#define _Loop_memset_y_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Loop_memset_y_proc : public sc_module {
    // Port declarations 28
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<1> > y_address0;
    sc_out< sc_logic > y_ce0;
    sc_out< sc_logic > y_we0;
    sc_out< sc_lv<32> > y_d0;
    sc_in< sc_lv<32> > y_q0;
    sc_out< sc_lv<1> > y_address1;
    sc_out< sc_logic > y_ce1;
    sc_out< sc_logic > y_we1;
    sc_out< sc_lv<32> > y_d1;
    sc_out< sc_lv<2> > A_address0;
    sc_out< sc_logic > A_ce0;
    sc_in< sc_lv<32> > A_q0;
    sc_out< sc_lv<2> > A_address1;
    sc_out< sc_logic > A_ce1;
    sc_in< sc_lv<32> > A_q1;
    sc_out< sc_lv<1> > x_address0;
    sc_out< sc_logic > x_ce0;
    sc_in< sc_lv<32> > x_q0;
    sc_out< sc_lv<1> > x_address1;
    sc_out< sc_logic > x_ce1;
    sc_in< sc_lv<32> > x_q1;


    // Module declarations
    Loop_memset_y_proc(sc_module_name name);
    SC_HAS_PROCESS(Loop_memset_y_proc);

    ~Loop_memset_y_proc();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<2> > i4_0_i_reg_125;
    sc_signal< sc_lv<1> > xor_ln25_fu_141_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln26_fu_147_p2;
    sc_signal< sc_lv<1> > icmp_ln26_reg_220;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln26_reg_220_pp0_iter1_reg;
    sc_signal< sc_lv<2> > i_fu_153_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > y_addr_1_reg_239;
    sc_signal< sc_lv<1> > y_addr_1_reg_239_pp0_iter1_reg;
    sc_signal< sc_lv<32> > mul_ln28_fu_192_p2;
    sc_signal< sc_lv<32> > mul_ln28_reg_245;
    sc_signal< sc_lv<32> > mul_ln28_1_fu_198_p2;
    sc_signal< sc_lv<32> > mul_ln28_1_reg_250;
    sc_signal< sc_lv<1> > ap_phi_mux_phi_ln25_i_phi_fu_117_p4;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > phi_ln25_i_reg_113;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<64> > zext_ln25_fu_136_p1;
    sc_signal< sc_lv<64> > zext_ln28_1_fu_172_p1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > tmp_1_fu_183_p3;
    sc_signal< sc_lv<64> > zext_ln28_fu_159_p1;
    sc_signal< sc_lv<3> > tmp_fu_164_p3;
    sc_signal< sc_lv<3> > or_ln28_fu_177_p2;
    sc_signal< sc_lv<32> > mul_ln28_fu_192_p0;
    sc_signal< sc_lv<32> > mul_ln28_fu_192_p1;
    sc_signal< sc_lv<32> > mul_ln28_1_fu_198_p0;
    sc_signal< sc_lv<32> > mul_ln28_1_fu_198_p1;
    sc_signal< sc_lv<32> > add_ln28_fu_204_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<61> ap_const_lv61_0;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_address0();
    void thread_A_address1();
    void thread_A_ce0();
    void thread_A_ce1();
    void thread_add_ln28_fu_204_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_phi_ln25_i_phi_fu_117_p4();
    void thread_ap_ready();
    void thread_i_fu_153_p2();
    void thread_icmp_ln26_fu_147_p2();
    void thread_mul_ln28_1_fu_198_p0();
    void thread_mul_ln28_1_fu_198_p1();
    void thread_mul_ln28_1_fu_198_p2();
    void thread_mul_ln28_fu_192_p0();
    void thread_mul_ln28_fu_192_p1();
    void thread_mul_ln28_fu_192_p2();
    void thread_or_ln28_fu_177_p2();
    void thread_tmp_1_fu_183_p3();
    void thread_tmp_fu_164_p3();
    void thread_x_address0();
    void thread_x_address1();
    void thread_x_ce0();
    void thread_x_ce1();
    void thread_xor_ln25_fu_141_p2();
    void thread_y_address0();
    void thread_y_address1();
    void thread_y_ce0();
    void thread_y_ce1();
    void thread_y_d0();
    void thread_y_d1();
    void thread_y_we0();
    void thread_y_we1();
    void thread_zext_ln25_fu_136_p1();
    void thread_zext_ln28_1_fu_172_p1();
    void thread_zext_ln28_fu_159_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
