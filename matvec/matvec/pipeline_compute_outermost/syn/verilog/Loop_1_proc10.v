// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_1_proc10 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        Atile_V_vec_0_dout,
        Atile_V_vec_0_empty_n,
        Atile_V_vec_0_read,
        Atile_V_vec_1_dout,
        Atile_V_vec_1_empty_n,
        Atile_V_vec_1_read,
        A_address0,
        A_ce0,
        A_we0,
        A_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] Atile_V_vec_0_dout;
input   Atile_V_vec_0_empty_n;
output   Atile_V_vec_0_read;
input  [31:0] Atile_V_vec_1_dout;
input   Atile_V_vec_1_empty_n;
output   Atile_V_vec_1_read;
output  [1:0] A_address0;
output   A_ce0;
output   A_we0;
output  [31:0] A_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg Atile_V_vec_0_read;
reg Atile_V_vec_1_read;
reg A_ce0;
reg A_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    Atile_V_vec_0_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln8_fu_91_p2;
reg    Atile_V_vec_1_blk_n;
wire    io_acc_block_signal_op13;
reg    ap_block_state2;
wire   [1:0] i_fu_97_p2;
reg   [1:0] i_reg_164;
reg   [31:0] tmp_vec_0_reg_169;
reg   [31:0] tmp_vec_1_reg_174;
wire   [3:0] zext_ln11_fu_119_p1;
reg   [3:0] zext_ln11_reg_179;
wire   [1:0] j_fu_129_p2;
wire    ap_CS_fsm_state3;
reg   [1:0] i_0_i_i_i_reg_69;
reg    ap_block_state1;
wire    ap_CS_fsm_state4;
reg   [1:0] j_0_i_i_i_reg_80;
wire   [0:0] icmp_ln10_fu_123_p2;
wire   [63:0] zext_ln11_2_fu_155_p1;
wire   [2:0] tmp_fu_111_p3;
wire   [0:0] trunc_ln11_fu_135_p1;
wire   [3:0] zext_ln11_1_fu_146_p1;
wire   [3:0] add_ln11_fu_150_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((icmp_ln8_fu_91_p2 == 1'd0) & (io_acc_block_signal_op13 == 1'b0)) & (icmp_ln8_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_i_i_i_reg_69 <= i_reg_164;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_i_i_reg_69 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_i_i_i_reg_80 <= j_fu_129_p2;
    end else if ((~((icmp_ln8_fu_91_p2 == 1'd0) & (io_acc_block_signal_op13 == 1'b0)) & (icmp_ln8_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_i_i_i_reg_80 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln8_fu_91_p2 == 1'd0) & (io_acc_block_signal_op13 == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_164 <= i_fu_97_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln8_fu_91_p2 == 1'd0) & (io_acc_block_signal_op13 == 1'b0)) & (icmp_ln8_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_vec_0_reg_169 <= Atile_V_vec_0_dout;
        tmp_vec_1_reg_174 <= Atile_V_vec_1_dout;
        zext_ln11_reg_179[2 : 1] <= zext_ln11_fu_119_p1[2 : 1];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        A_we0 = 1'b1;
    end else begin
        A_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Atile_V_vec_0_blk_n = Atile_V_vec_0_empty_n;
    end else begin
        Atile_V_vec_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln8_fu_91_p2 == 1'd0) & (io_acc_block_signal_op13 == 1'b0)) & (icmp_ln8_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Atile_V_vec_0_read = 1'b1;
    end else begin
        Atile_V_vec_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Atile_V_vec_1_blk_n = Atile_V_vec_1_empty_n;
    end else begin
        Atile_V_vec_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln8_fu_91_p2 == 1'd0) & (io_acc_block_signal_op13 == 1'b0)) & (icmp_ln8_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Atile_V_vec_1_read = 1'b1;
    end else begin
        Atile_V_vec_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln8_fu_91_p2 == 1'd0) & (io_acc_block_signal_op13 == 1'b0)) & (icmp_ln8_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln8_fu_91_p2 == 1'd0) & (io_acc_block_signal_op13 == 1'b0)) & (icmp_ln8_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln8_fu_91_p2 == 1'd0) & (io_acc_block_signal_op13 == 1'b0)) & (icmp_ln8_fu_91_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((icmp_ln8_fu_91_p2 == 1'd0) & (io_acc_block_signal_op13 == 1'b0)) & (icmp_ln8_fu_91_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln10_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = zext_ln11_2_fu_155_p1;

assign A_d0 = ((trunc_ln11_fu_135_p1[0:0] === 1'b1) ? tmp_vec_1_reg_174 : tmp_vec_0_reg_169);

assign add_ln11_fu_150_p2 = (zext_ln11_reg_179 + zext_ln11_1_fu_146_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln8_fu_91_p2 == 1'd0) & (io_acc_block_signal_op13 == 1'b0));
end

assign i_fu_97_p2 = (i_0_i_i_i_reg_69 + 2'd1);

assign icmp_ln10_fu_123_p2 = ((j_0_i_i_i_reg_80 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_91_p2 = ((i_0_i_i_i_reg_69 == 2'd2) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op13 = (Atile_V_vec_1_empty_n & Atile_V_vec_0_empty_n);

assign j_fu_129_p2 = (j_0_i_i_i_reg_80 + 2'd1);

assign tmp_fu_111_p3 = {{i_0_i_i_i_reg_69}, {1'd0}};

assign trunc_ln11_fu_135_p1 = j_0_i_i_i_reg_80[0:0];

assign zext_ln11_1_fu_146_p1 = j_0_i_i_i_reg_80;

assign zext_ln11_2_fu_155_p1 = add_ln11_fu_150_p2;

assign zext_ln11_fu_119_p1 = tmp_fu_111_p3;

always @ (posedge ap_clk) begin
    zext_ln11_reg_179[0] <= 1'b0;
    zext_ln11_reg_179[3] <= 1'b0;
end

endmodule //Loop_1_proc10
